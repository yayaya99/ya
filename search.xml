<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>编程思想第七章练习</title>
      <link href="/2019/09/04/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E7%AC%AC%E4%B8%83%E7%AB%A0%E7%BB%83%E4%B9%A0/"/>
      <url>/2019/09/04/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E7%AC%AC%E4%B8%83%E7%AB%A0%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>编程思想第七章练习</p><a id="more"></a><h2 id="练习1"><a href="#练习1" class="headerlink" title="练习1:"></a>练习1:</h2><p>创建一个简单的类。第二个类中，将一个引用定义为第一个类的对象。运用惰性初始化来实例化 这个对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">     Second second  = new Second(&quot;Init String&quot;);</span><br><span class="line">     second.chenked();</span><br><span class="line">     System.out.println(second.getSimple());</span><br><span class="line">     second.chenked();</span><br><span class="line">     System.out.println(second);</span><br><span class="line">     second.setSimple(&quot;New String&quot;);</span><br><span class="line">     System.out.println(second);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Simple&#123;</span><br><span class="line">String s;</span><br><span class="line">public Simple(String si) &#123;</span><br><span class="line">s = si;</span><br><span class="line">&#125;</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return s;</span><br><span class="line">&#125;</span><br><span class="line">public void setString(String sNew) &#123;</span><br><span class="line">s = sNew;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Second&#123;</span><br><span class="line">Simple simple;</span><br><span class="line">String s;</span><br><span class="line">public Second(String si) &#123;</span><br><span class="line">s = si;</span><br><span class="line">&#125;</span><br><span class="line">public void chenked() &#123;</span><br><span class="line">if(simple==null) &#123;</span><br><span class="line">System.out.println(&quot;not initialized&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;initialized&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private Simple lazy() &#123;</span><br><span class="line">if(simple==null) &#123;</span><br><span class="line">System.out.println(&quot;Creating simple&quot;);</span><br><span class="line">simple = new Simple(s);</span><br><span class="line">&#125;</span><br><span class="line">return simple;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Simple getSimple() &#123;</span><br><span class="line">return lazy();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String toString() &#123;</span><br><span class="line">return lazy().toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setSimple(String sNew) &#123;</span><br><span class="line">lazy().setString(sNew);</span><br><span class="line">&#125;</span><br><span class="line">&#125;/*Output:</span><br><span class="line">not initialized</span><br><span class="line">Creating simple</span><br><span class="line">Init String</span><br><span class="line">initialized</span><br><span class="line">Init String</span><br><span class="line">New String</span><br><span class="line">*///:~</span><br></pre></td></tr></table></figure><h2 id="练习2："><a href="#练习2：" class="headerlink" title="练习2："></a>练习2：</h2><p>从Detergent中继承产生一个新的类。覆盖scrub()并添加一个名为sterilize()的新方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">class Cleanser &#123;</span><br><span class="line">      private String s = &quot;Cleanser&quot;;</span><br><span class="line">      public void append(String a) &#123; s += a; &#125;</span><br><span class="line">      public void dilute() &#123; append(&quot; dilute()&quot;); &#125;</span><br><span class="line">      public void apply() &#123; append(&quot; apply()&quot;); &#125;</span><br><span class="line">      public void scrub() &#123; append(&quot; scrub()&quot;); &#125;</span><br><span class="line">      public String toString() &#123; return s; &#125;</span><br><span class="line">      public static void main(String[] args) &#123;</span><br><span class="line">        Cleanser x = new Cleanser();</span><br><span class="line">        x.dilute(); x.apply(); x.scrub();</span><br><span class="line">        System.out.println(x);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    public class Detergent extends Cleanser &#123;</span><br><span class="line">      // Change a method:</span><br><span class="line">      public void scrub() &#123;</span><br><span class="line">        append(&quot; Detergent.scrub()&quot;);</span><br><span class="line">        super.scrub(); // Call base-class version</span><br><span class="line">      &#125;</span><br><span class="line">      // Add methods to the interface:</span><br><span class="line">      public void foam() &#123; append(&quot; foam()&quot;); &#125;</span><br><span class="line">      // Test the new class:</span><br><span class="line">      public static void main(String[] args) &#123;</span><br><span class="line">        Detergent x = new Detergent();</span><br><span class="line">        x.dilute();</span><br><span class="line">        x.apply();</span><br><span class="line">        x.scrub();</span><br><span class="line">        x.foam();</span><br><span class="line">        System.out.println(x);</span><br><span class="line">        System.out.println(&quot;Testing base class:&quot;);</span><br><span class="line">        Cleanser.main(args);</span><br><span class="line">      &#125; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">     public static void main(String[] args) &#123;</span><br><span class="line">        NewDetergent newDetergent = new NewDetergent();</span><br><span class="line">        newDetergent.dilute();</span><br><span class="line">        newDetergent.scrub();</span><br><span class="line">        newDetergent.sterilize();</span><br><span class="line">        System.out.println(newDetergent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class NewDetergent extends Detergent&#123;</span><br><span class="line">    public void scrub() &#123;</span><br><span class="line">        append(&quot;new Detergent.scrub&quot;);</span><br><span class="line">        super.scrub();</span><br><span class="line">    &#125;</span><br><span class="line">    public void sterilize() &#123;</span><br><span class="line">        append(&quot;sterilize&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习3："><a href="#练习3：" class="headerlink" title="练习3："></a>练习3：</h2><p>证明前面两句话（即使你不为Cartoon创建构造器，编译器也为会你合成一个默认的构造器，该构造器将调用基类的构造器）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        new Cartoon();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Art&#123;</span><br><span class="line">    Art()&#123;</span><br><span class="line">        System.out.println(&quot;Art constructor&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Drawing extends Art&#123;</span><br><span class="line">    Drawing()&#123;</span><br><span class="line">        System.out.println(&quot;Drawing Contructor&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Cartoon extends Drawing&#123;</span><br><span class="line">//  public Cartoon() &#123;</span><br><span class="line">//      System.out.println(&quot;Cartoon Contructor&quot;);</span><br><span class="line">//  &#125;</span><br><span class="line">&#125;/*Output:</span><br><span class="line">Art constructor</span><br><span class="line">Drawing Contructor</span><br><span class="line">*///:~</span><br></pre></td></tr></table></figure><h2 id="练习4："><a href="#练习4：" class="headerlink" title="练习4："></a>练习4：</h2><p>证明基类构造器总是会被调用，在导出类构造器之前被调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">          new Derived2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Base1&#123;</span><br><span class="line"></span><br><span class="line">    public Base1() &#123;</span><br><span class="line">        System.out.println(&quot;Base1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Derived1 extends Base1&#123;</span><br><span class="line"></span><br><span class="line">    public Derived1() &#123;</span><br><span class="line">        System.out.println(&quot;Derived&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Derived2 extends Derived1&#123;</span><br><span class="line"></span><br><span class="line">    public Derived2() &#123;</span><br><span class="line">        System.out.println(&quot;Derived2&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习5："><a href="#练习5：" class="headerlink" title="练习5："></a>练习5：</h2><p>创建两个带有默认构造器（空参数列表）的类A和类B。从A中继承产生一个名为C的新，并在C内创建一个B类的成员。不要给C编写构造器。创建一个C类的对象并观察其结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class A&#123;</span><br><span class="line">A() &#123;</span><br><span class="line">System.out.println(&quot;A()&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class B&#123;</span><br><span class="line">B() &#123;</span><br><span class="line">System.out.println(&quot;B()&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class C extends A&#123;</span><br><span class="line">B b = new B();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">       new C();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;/*Output:</span><br><span class="line">A()</span><br><span class="line">B()</span><br><span class="line">*///:~</span><br></pre></td></tr></table></figure><h2 id="练习7："><a href="#练习7：" class="headerlink" title="练习7："></a>练习7：</h2><p>修改练习5，使A和B以带参数的构造器取代默认的构造器。为C写一个构造器，并在其中执行所有初始化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class A&#123;</span><br><span class="line">A(int i) &#123;</span><br><span class="line">System.out.println(&quot;A()&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class B&#123;</span><br><span class="line">B(String i) &#123;</span><br><span class="line">System.out.println(&quot;B()&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class C extends A&#123;</span><br><span class="line">C()&#123;</span><br><span class="line">super(1);</span><br><span class="line">B b = new B(&quot;s&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">       new C();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习8："><a href="#练习8：" class="headerlink" title="练习8："></a>练习8：</h2><p>创建一个基类，它仅有一个非默认构造器；再创建一个导出类，它带有默认构造器和非默认构造器。在导出类的构造器中调用基类的构造器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class A&#123;</span><br><span class="line">A(int i)&#123;</span><br><span class="line">System.out.println(&quot;A()&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Test extends A&#123;</span><br><span class="line">Test()&#123;</span><br><span class="line">super(1);</span><br><span class="line">&#125;</span><br><span class="line">Test(int i)&#123;</span><br><span class="line">super(i);</span><br><span class="line">&#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">    new Test();</span><br><span class="line">    new Test(2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习9："><a href="#练习9：" class="headerlink" title="练习9："></a>练习9：</h2><p>创建一个Root类，令其含有名为Component1、Component 2、Component3的类的各一个实例（这些也由你写）。从Root中派生一个类Stem，也含有上述各“组成部分”。所有的类都应带有可打印出类的相关信息的默认构造器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">class Component1&#123;</span><br><span class="line">Component1()&#123;</span><br><span class="line">System.out.println(&quot;Component1&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Component2&#123;</span><br><span class="line">Component2()&#123;</span><br><span class="line">System.out.println(&quot;Component2&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Component3&#123;</span><br><span class="line">Component3()&#123;</span><br><span class="line">System.out.println(&quot;Component3&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Root &#123;</span><br><span class="line">Component1 c1 = new Component1();</span><br><span class="line">Component2 c2 = new Component2();</span><br><span class="line">Component3 c3 = new Component3();</span><br><span class="line">Root()&#123;</span><br><span class="line">System.out.println(&quot;Root()&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Stem extends Root&#123;</span><br><span class="line">Component1 c1 = new Component1();</span><br><span class="line">Component2 c2 = new Component2();</span><br><span class="line">Component3 c3 = new Component3();</span><br><span class="line">Stem()&#123;</span><br><span class="line">System.out.println(&quot;Stem()&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Test &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Stem s = new Stem();</span><br><span class="line">&#125;</span><br><span class="line">&#125;/*Output:</span><br><span class="line">Component1</span><br><span class="line">Component2</span><br><span class="line">Component3</span><br><span class="line">Root()</span><br><span class="line">Component1</span><br><span class="line">Component2</span><br><span class="line">Component3</span><br><span class="line">Stem()</span><br><span class="line">*///:~</span><br></pre></td></tr></table></figure><h2 id="练习10："><a href="#练习10：" class="headerlink" title="练习10："></a>练习10：</h2><p>修改练习9，使每个类都仅具有非默认的构造器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">class Component1&#123;</span><br><span class="line">Component1()&#123;</span><br><span class="line">System.out.println(&quot;Component1&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Component2&#123;</span><br><span class="line">Component2()&#123;</span><br><span class="line">System.out.println(&quot;Component2&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Component3&#123;</span><br><span class="line">Component3()&#123;</span><br><span class="line">System.out.println(&quot;Component3&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Root &#123;</span><br><span class="line">Component1 c1 = new Component1();</span><br><span class="line">Component2 c2 = new Component2();</span><br><span class="line">Component3 c3 = new Component3();</span><br><span class="line"></span><br><span class="line">Root(int i)&#123;</span><br><span class="line">System.out.println(&quot;Root()&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Stem extends Root&#123;</span><br><span class="line">Component1 c1 = new Component1();</span><br><span class="line">Component2 c2 = new Component2();</span><br><span class="line">Component3 c3 = new Component3();</span><br><span class="line"></span><br><span class="line">Stem(int i)&#123;</span><br><span class="line">super(i);</span><br><span class="line">System.out.println(&quot;Stem()&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Test &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Stem s = new Stem(1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;/*Output:</span><br><span class="line">Component1</span><br><span class="line">Component2</span><br><span class="line">Component3</span><br><span class="line">Root()</span><br><span class="line">Component1</span><br><span class="line">Component2</span><br><span class="line">Component3</span><br><span class="line">Stem()</span><br><span class="line">*///:~</span><br></pre></td></tr></table></figure><h2 id="练习12："><a href="#练习12：" class="headerlink" title="练习12："></a>练习12：</h2><p>将一个适当的dispose()方法的层次结构添加到练习9的所有类中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">class Component1&#123;</span><br><span class="line">Component1()&#123;</span><br><span class="line">System.out.println(&quot;Component1&quot;);</span><br><span class="line">&#125;</span><br><span class="line">public void dispose() &#123;</span><br><span class="line">        System.out.println(&quot;Componentc1.dispose()&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Component2&#123;</span><br><span class="line">Component2()&#123;</span><br><span class="line">System.out.println(&quot;Component2&quot;);</span><br><span class="line">&#125;</span><br><span class="line">public void dispose() &#123;</span><br><span class="line">        System.out.println(&quot;Componentc2.dispose()&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Component3&#123;</span><br><span class="line">Component3()&#123;</span><br><span class="line">System.out.println(&quot;Component3&quot;);</span><br><span class="line">&#125;</span><br><span class="line">public void dispose() &#123;</span><br><span class="line">        System.out.println(&quot;Componentc3.dispose()&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Root &#123;</span><br><span class="line">Component1 c1 = new Component1();</span><br><span class="line">Component2 c2 = new Component2();</span><br><span class="line">Component3 c3 = new Component3();</span><br><span class="line">Root()&#123;</span><br><span class="line">System.out.println(&quot;Root()&quot;);</span><br><span class="line">&#125;</span><br><span class="line">public void dispose() &#123;</span><br><span class="line">        System.out.println(&quot;Root.dispose()&quot;);</span><br><span class="line">        c1.dispose();</span><br><span class="line">        c2.dispose();</span><br><span class="line">        c3.dispose();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Stem extends Root&#123;</span><br><span class="line">Component1 c1 = new Component1();</span><br><span class="line">Component2 c2 = new Component2();</span><br><span class="line">Component3 c3 = new Component3();</span><br><span class="line">Stem()&#123;</span><br><span class="line">System.out.println(&quot;Stem()&quot;);</span><br><span class="line">&#125;</span><br><span class="line">public void dispose() &#123;</span><br><span class="line">        System.out.println(&quot;Stem.dispose()&quot;);</span><br><span class="line">        c1.dispose();</span><br><span class="line">        c2.dispose();</span><br><span class="line">        c3.dispose();</span><br><span class="line">        super.dispose();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Test &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">new Stem().dispose();</span><br><span class="line">&#125;</span><br><span class="line">&#125;/*Output:</span><br><span class="line">Component1</span><br><span class="line">Component2</span><br><span class="line">Component3</span><br><span class="line">Root()</span><br><span class="line">Component1</span><br><span class="line">Component2</span><br><span class="line">Component3</span><br><span class="line">Stem()</span><br><span class="line">Stem.dispose()</span><br><span class="line">Componentc1.dispose()</span><br><span class="line">Componentc2.dispose()</span><br><span class="line">Componentc3.dispose()</span><br><span class="line">Root.dispose()</span><br><span class="line">Componentc1.dispose()</span><br><span class="line">Componentc2.dispose()</span><br><span class="line">Componentc3.dispose()</span><br><span class="line">*///:~</span><br></pre></td></tr></table></figure><h2 id="练习13"><a href="#练习13" class="headerlink" title="练习13:"></a>练习13:</h2><p>创建一个类，它应带有一个被重载了三次的方法。继承产生一个新类，并添加一个该方法的新的重载定义，展示这四个方法在导出类中都是可以使用的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class A&#123;</span><br><span class="line">void Overload(int i) &#123;</span><br><span class="line">System.out.println(&quot;A1&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void Overload(String i) &#123;</span><br><span class="line">System.out.println(&quot;A2&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void Overload(float i) &#123;</span><br><span class="line">System.out.println(&quot;A3&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Test extends A&#123;</span><br><span class="line">void Overload(char i) &#123;</span><br><span class="line">System.out.println(&quot;Test&quot;);</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Test test = new Test();</span><br><span class="line">test.Overload(1);</span><br><span class="line">test.Overload(&quot;1&quot;);</span><br><span class="line">test.Overload(1f);</span><br><span class="line">test.Overload(&apos;1&apos;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;/*Output:</span><br><span class="line">A1</span><br><span class="line">A2</span><br><span class="line">A3</span><br><span class="line">Test</span><br><span class="line">*///:~</span><br></pre></td></tr></table></figure><h2 id="练习14："><a href="#练习14：" class="headerlink" title="练习14："></a>练习14：</h2><p>在Car.java中给Engine添加一个service(),并在main()中调用该方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">class Engine&#123;</span><br><span class="line">public void start() &#123;&#125;</span><br><span class="line">public void rev() &#123;&#125;</span><br><span class="line">public void stop() &#123;&#125;</span><br><span class="line">public void service() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Wheel&#123;</span><br><span class="line">public void inflate(int psi) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Window&#123;</span><br><span class="line">public void rollup() &#123;&#125;</span><br><span class="line">public void rolldown() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Door&#123;</span><br><span class="line">public Window window = new Window();</span><br><span class="line">public void open() &#123;&#125;</span><br><span class="line">public void close() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Car&#123;</span><br><span class="line">private Engine engine = new Engine();</span><br><span class="line">private Wheel[] wheel = new Wheel[4];</span><br><span class="line">public Door</span><br><span class="line">left = new Door(),</span><br><span class="line">right = new Door();</span><br><span class="line">public Car() &#123;</span><br><span class="line">for(int i=0;i&lt;4;i++) &#123;</span><br><span class="line">wheel[i] = new Wheel();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Car car = new Car();</span><br><span class="line">car.left.window.rollup();</span><br><span class="line">car.wheel[0].inflate(72);</span><br><span class="line">car.engine.service();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习15："><a href="#练习15：" class="headerlink" title="练习15："></a>练习15：</h2><p>在包中编写一个类，类应具备一个protected方法。在包外部，试着调用protede方法并解释其结果。然后，从你的类中继承产生一个类，并从该导出类的方法内部调用该protected方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package test1982;</span><br><span class="line"></span><br><span class="line">public class A&#123;</span><br><span class="line">protected void f() &#123;</span><br><span class="line">System.out.println(&quot;f()&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package test;</span><br><span class="line">import test1982.*;</span><br><span class="line"></span><br><span class="line">class B extends A&#123;</span><br><span class="line">public void g() &#123;</span><br><span class="line">f();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Test&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">new B().g();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习16："><a href="#练习16：" class="headerlink" title="练习16："></a>练习16：</h2><p>创建一个名为Amphibian的类，由此继承产生一个成为Frog的类，在基类中设置适当的方法，在main（）中，创建一个Frog向上转型至Amphibian， 然后说明所有方法都可工作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Amphibian&#123;</span><br><span class="line">public void f() &#123;</span><br><span class="line">System.out.println(&quot;f()&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Frog extends Amphibian&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public class Test&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Amphibian am =new Frog();</span><br><span class="line">am.f();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习17："><a href="#练习17：" class="headerlink" title="练习17："></a>练习17：</h2><p>修改练习16，使Frog覆盖基类中方法的定义。请留心main中都发生了什么</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Amphibian&#123;</span><br><span class="line">public void f() &#123;</span><br><span class="line">System.out.println(&quot;Amphibian.f()&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Frog extends Amphibian&#123;</span><br><span class="line">public void f() &#123;</span><br><span class="line">System.out.println(&quot;Frog.f()&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Test&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Amphibian am =new Frog();</span><br><span class="line">am.f();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习18："><a href="#练习18：" class="headerlink" title="练习18："></a>练习18：</h2><p>创建一个含有static final域和final域的类，说明二者间的区别。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public class Exercise7_18 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">System.out.println(&quot;First Object&quot;);</span><br><span class="line">System.out.println(new WithFinalFields());</span><br><span class="line">System.out.println(&quot;Second Object&quot;);</span><br><span class="line">System.out.println(new WithFinalFields());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class SelfCounter &#123;</span><br><span class="line">private static int count;</span><br><span class="line">private int id = count++;</span><br><span class="line"></span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;Selfcounter&quot; + id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class WithFinalFields &#123;</span><br><span class="line">final SelfCounter selfCounter = new SelfCounter();</span><br><span class="line">static final SelfCounter s = new SelfCounter();</span><br><span class="line"></span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;selfcounter = &quot; + selfCounter + &quot; \ns = &quot; + s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;/*Output:</span><br><span class="line">First Object</span><br><span class="line">selfcounter = Selfcounter1 </span><br><span class="line">s = Selfcounter0</span><br><span class="line">Second Object</span><br><span class="line">selfcounter = Selfcounter2 </span><br><span class="line">s = Selfcounter0</span><br><span class="line">*///:~</span><br></pre></td></tr></table></figure><h2 id="练习20："><a href="#练习20：" class="headerlink" title="练习20："></a>练习20：</h2><p>展示@Override注解可以解决本节中的问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">class WithFinals &#123;</span><br><span class="line">// Identical to &quot;private&quot; alone:</span><br><span class="line">private final void f() &#123;</span><br><span class="line">System.out.println(&quot;WithFinals.f()&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Also automatically &quot;final&quot;:</span><br><span class="line">private void g() &#123;</span><br><span class="line">System.out.println(&quot;WithFinals.g()&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class OverridingPrivate extends WithFinals &#123;</span><br><span class="line">private final void f() &#123;</span><br><span class="line">System.out.println(&quot;OverridingPrivate.f()&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void g() &#123;</span><br><span class="line">System.out.println(&quot;OverridingPrivate.g()&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class OverridingPrivate2 extends OverridingPrivate &#123;</span><br><span class="line">public final void f() &#123;</span><br><span class="line">System.out.println(&quot;OverridingPrivate2.f()&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void g() &#123;</span><br><span class="line">System.out.println(&quot;OverridingPrivate2.g()&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class FinalOverridingIllusion &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">OverridingPrivate2 op2 = new OverridingPrivate2();</span><br><span class="line">op2.f();</span><br><span class="line">op2.g();</span><br><span class="line">// You can upcast:</span><br><span class="line">OverridingPrivate op = op2;</span><br><span class="line">// But you can&apos;t call the methods:</span><br><span class="line">// ! op.f();</span><br><span class="line">// ! op.g();</span><br><span class="line">// Same here:</span><br><span class="line">WithFinals wf = op2;</span><br><span class="line">// ! wf.f();</span><br><span class="line">// ! wf.g();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class Exercise7_20 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">OverridingPrivate20 oPrivate = new OverridingPrivate20();</span><br><span class="line">// oPrivate.f();</span><br><span class="line">// oPrivate.g();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class OverridingPrivate20 extends WithFinals &#123;</span><br><span class="line">@Override</span><br><span class="line">private final void f() &#123;</span><br><span class="line">System.out.println(&quot;OverridingPrivate.f()&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">private void g() &#123;</span><br><span class="line">System.out.println(&quot;OverridingPrivate.g()&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class OverridingPrivate30 extends OverridingPrivate20 &#123;</span><br><span class="line">@Override</span><br><span class="line">public void f() &#123;</span><br><span class="line">System.out.println(&quot;OverridingPrivate2.f()&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void g() &#123;</span><br><span class="line">System.out.println(&quot;OverridingPrivate2.g()&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习21："><a href="#练习21：" class="headerlink" title="练习21："></a>练习21：</h2><p>创建一个但final方法的类。由此继承产生一个类并尝试覆盖该方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Exercise7_21 extends WithFinalMethod &#123;</span><br><span class="line">//  void f() &#123;</span><br><span class="line">//    </span><br><span class="line">//  &#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class WithFinalMethod &#123;</span><br><span class="line">final void f() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习23："><a href="#练习23：" class="headerlink" title="练习23："></a>练习23：</h2><p>请证明加载类的动作仅发生一次。证明该类的第一个实体的创建者或者对static成员的访问都有可能引起加载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Exercise7_23 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">       System.out.println(&quot;Calling static member&quot;);</span><br><span class="line">       LoadTest.staticMember();</span><br><span class="line">       System.out.println(&quot;Creating an object&quot;);</span><br><span class="line">       new LoadTest();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">class LoadTest&#123;</span><br><span class="line">   static&#123;</span><br><span class="line">       System.out.println(&quot;Loading loadTest&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">   static void staticMember() &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习24："><a href="#练习24：" class="headerlink" title="练习24："></a>练习24：</h2><p>在Beetle.java中，从Beetle类继承产生一个具体类型的“甲壳虫”。其形式与现有类相同，跟踪并解释其输出结果</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Thinking in Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java惰性初始化</title>
      <link href="/2019/08/19/Java%E6%83%B0%E6%80%A7%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/2019/08/19/Java%E6%83%B0%E6%80%A7%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>Java惰性初始化</p><a id="more"></a><p>在书中第七章中提到了引用的初始化，编译器并不是简单地为每一个引用都创建默认对象，减少不必要的负担</p><p>1、在定义对象的地方。这意味着它们总是能够在构造器被调用之前被初始化。<br>2、在类的构造器中。<br>3、就在正要使用这些对象之前，这种方式称为惰性初始化。在生成对象不值得及不必每次都生成对象的情况下，这种方式可以减少额外的负担。<br>4、使用实例初始化。</p><p>惰性初始化的目的是延迟对象的初始化，直到程序真正使用它，同时确保它只初始化一次。</p><p>/*<br>惰性初始化：当需要一个实例的时候才初始化一个对象。<br>新建两个简单的类，第二个类中包含第一个类的一个引用，当<br>需要第一个类的对象是调用Lazy()方法即可获得第一个类的对象。<br>*/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class First&#123;</span><br><span class="line"> First()&#123;</span><br><span class="line"> System.out.print(&quot;First()&quot;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Lazy&#123;</span><br><span class="line"> First f;</span><br><span class="line"> public void print()&#123;</span><br><span class="line"> if(f==null)</span><br><span class="line"> f = new First();</span><br><span class="line"> &#125;</span><br><span class="line"> public static void main(String[] args)&#123;</span><br><span class="line"> Lazy z = new Lazy();</span><br><span class="line"> z.print();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;/*Output:</span><br><span class="line">First()</span><br><span class="line">*///:~</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 初始化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程思想第五章练习</title>
      <link href="/2019/08/11/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E7%AC%AC%E4%BA%94%E7%AB%A0%E7%BB%83%E4%B9%A0/"/>
      <url>/2019/08/11/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E7%AC%AC%E4%BA%94%E7%AB%A0%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>编程思想第五章练习</p><a id="more"></a><h2 id="练习1："><a href="#练习1：" class="headerlink" title="练习1："></a>练习1：</h2><p>创建一个类,它包含一个未初始化的String引用.验证该引用被Java初始化成null</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Test&#123;</span><br><span class="line">public String string;</span><br><span class="line">&#125;</span><br><span class="line">public class E1 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Test test = new Test();</span><br><span class="line">System.out.println((test.string == null));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习2："><a href="#练习2：" class="headerlink" title="练习2："></a>练习2：</h2><p>创建一个类，它包含一个在定义时就被初始化了的String域，以及另一个通过构造器初始化的String域。这两种方式有何差异。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">String s1=&quot;Initialized at definition&quot;;</span><br><span class="line">String s2;</span><br><span class="line">public Test(String s) &#123;</span><br><span class="line">s2 = s;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Test test = new Test(&quot;Initialized at constructor&quot;);</span><br><span class="line">System.out.println(&quot;s1= &quot;+test.s1);</span><br><span class="line">System.out.println(&quot;s2= &quot;+test.s2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习3："><a href="#练习3：" class="headerlink" title="练习3："></a>练习3：</h2><p>创建一个带默认构造器（即无参构造器）的类，在构造器中打印一条消息。为这个类创建一个对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class T1&#123;</span><br><span class="line">T1()&#123;</span><br><span class="line">System.out.println(&quot;无参构造器&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Test &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">new T1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习4："><a href="#练习4：" class="headerlink" title="练习4："></a>练习4：</h2><p>为前一个练习中的类添加一个重载构造器，令其接受一个字符参数，并在构造器中把你自己的信息和接受的参数一起打印出来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class T1&#123;</span><br><span class="line">T1()&#123;</span><br><span class="line">System.out.println(&quot;这是无参构造器&quot;);</span><br><span class="line">&#125;</span><br><span class="line">T1(String s)&#123;</span><br><span class="line">System.out.println(&quot;这是&quot;+s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Test &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">new T1();</span><br><span class="line">new T1(&quot;重载构造器&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;/*Output:</span><br><span class="line">这是无参构造器</span><br><span class="line">这是重载构造器</span><br><span class="line">*///:~</span><br></pre></td></tr></table></figure><h2 id="练习5："><a href="#练习5：" class="headerlink" title="练习5："></a>练习5：</h2><p>创建一个名为Dog的类，它具有重载的bark（）方法。此方法应根据不同的基本数据类型进行重载，并根据被调用的版本，打印出不同类型的狗吠（barking）、咆哮（howling）等信息，编写main（）来调用所有不同版本的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Dog&#123;</span><br><span class="line">void bark() &#123;</span><br><span class="line">System.out.println(&quot;barking&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void bark(int i) &#123;</span><br><span class="line">System.out.println(&quot;howling&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Test &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Dog dog = new Dog();</span><br><span class="line">dog.bark();</span><br><span class="line">dog.bark(1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;/*Output:</span><br><span class="line">barking</span><br><span class="line">howling</span><br><span class="line">*///:~</span><br></pre></td></tr></table></figure><h2 id="练习6："><a href="#练习6：" class="headerlink" title="练习6："></a>练习6：</h2><p>修改前一个练习的程序，让两个重载方法各自接受两个类型的不同的参数，但二者顺序相反。验证其是否工作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Dog&#123;</span><br><span class="line">void bark(float f,int i) &#123;</span><br><span class="line">System.out.println(&quot;barking&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void bark(int i,float f) &#123;</span><br><span class="line">System.out.println(&quot;howling&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Test &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Dog dog = new Dog();</span><br><span class="line">dog.bark(1.1f,1);</span><br><span class="line">dog.bark(1,1.1f);</span><br><span class="line">&#125;</span><br><span class="line">&#125;/*Output:</span><br><span class="line">barking</span><br><span class="line">howling</span><br><span class="line">*///:~</span><br></pre></td></tr></table></figure><h2 id="练习7："><a href="#练习7：" class="headerlink" title="练习7："></a>练习7：</h2><p>创建一个没有构造器的类，并在main（）中创建其对象，用以验证编译器是否真的自动加入了默认构造器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Dog&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public class Test &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">new Dog();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习8："><a href="#练习8：" class="headerlink" title="练习8："></a>练习8：</h2><p>编写具有两个方法的类，在第一个方法内调用第二个方法两次：第一次调用时不使用this关键字，第二次调用时使用this关键字————这里只是为了验证它是起作用的，你不应该在实践中使用这种方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">void t1() &#123;</span><br><span class="line">t2();</span><br><span class="line">this.t2();</span><br><span class="line">&#125;</span><br><span class="line">void t2() &#123;</span><br><span class="line">System.out.println(&quot;t2()&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">new Test().t1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;/*Output:</span><br><span class="line">t2()</span><br><span class="line">t2()</span><br><span class="line">*///:~</span><br></pre></td></tr></table></figure><h2 id="练习14："><a href="#练习14：" class="headerlink" title="练习14："></a>练习14：</h2><p>编写一个类，拥有两个静态字符串域，其中一个在定义处初始化，另一个在静态块中初始化。现在，加入一个静态方法用以打印出两个字段值。请证明它们都会在被使用之前完成初始化动作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">static String a = &quot;a&quot;;</span><br><span class="line">static String b;</span><br><span class="line">static &#123;</span><br><span class="line">b = &quot;b&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void print() &#123;</span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">new Test();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习15："><a href="#练习15：" class="headerlink" title="练习15："></a>练习15：</h2><p>编写一个含有字符串域的类，并采用实例初始化方式进行初始化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Test&#123;</span><br><span class="line">String s;</span><br><span class="line">&#123;</span><br><span class="line">s = new String(&quot;s&quot;);</span><br><span class="line">&#125;</span><br><span class="line">Test ()&#123;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public class Mugs&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Test test = new Test();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习16："><a href="#练习16：" class="headerlink" title="练习16："></a>练习16：</h2><p>创建一个String对象数据，并为每一个元素都赋值一个String。用for循环来打印该数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    String[] arrayString = &#123;&quot;1111&quot;,&quot;2222&quot;,&quot;3333&quot;,&quot;4444&quot;&#125;;</span><br><span class="line">        for(String s:arrayString)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;/*Output:</span><br><span class="line">1111</span><br><span class="line">2222</span><br><span class="line">3333</span><br><span class="line">4444</span><br><span class="line">*///:~</span><br></pre></td></tr></table></figure><h2 id="练习17、18："><a href="#练习17、18：" class="headerlink" title="练习17、18："></a>练习17、18：</h2><p>创建一个类，它有一个构造器，这个构造器接收一个String类型的参数。在构造阶段，打印此参数。创建一个该类对象的引用数组，但是不实际地创建对象赋值给该数组。试着运行程序。再试着通过创建对象，再赋值给引用数组，从而完成程序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class TestString&#123;</span><br><span class="line">TestString(String string)&#123;</span><br><span class="line">System.out.println(string);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Test&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">TestString[] tests = new TestString[] &#123;</span><br><span class="line">new TestString(&quot;a&quot;),</span><br><span class="line">new TestString(&quot;b&quot;)</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;/*Output:</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">*///:~</span><br></pre></td></tr></table></figure><h2 id="练习19："><a href="#练习19：" class="headerlink" title="练习19："></a>练习19：</h2><p>写一个类，他接受一个可变参数的String数组，验证你可以向该方法传递一个用逗号分隔的String列表，或是一个String[]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">static void printString(String... args) &#123;</span><br><span class="line">for(String s:args) &#123;</span><br><span class="line">System.out.print(s+&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">printString(new String[] &#123;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;/*Output:</span><br><span class="line">a b c </span><br><span class="line">*///:~</span><br></pre></td></tr></table></figure><h2 id="练习20："><a href="#练习20：" class="headerlink" title="练习20："></a>练习20：</h2><p>创建一个使用可变参数列表而不是用普通main()语法的主函数main()，打印args数组的传入的命令行参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">public static void main(String... args) &#123;</span><br><span class="line">for(String s:args) &#123;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习21："><a href="#练习21：" class="headerlink" title="练习21："></a>练习21：</h2><p>创建一个enum，它包含纸币中最小面值的6种类型。通过values()循环并打印每一个值及其ordinal()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">enum Money&#123;</span><br><span class="line">One,Five,Ten,Twe,Fif</span><br><span class="line">&#125;</span><br><span class="line">public class Test&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">for(Money s:Money.values()) &#123;</span><br><span class="line">System.out.println(s+&quot;,ordinal:&quot;+s.ordinal());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;/*Output:</span><br><span class="line">One,ordinal:0</span><br><span class="line">Five,ordinal:1</span><br><span class="line">Ten,ordinal:2</span><br><span class="line">Twe,ordinal:3</span><br><span class="line">Fif,ordinal:4</span><br><span class="line">*///:~</span><br></pre></td></tr></table></figure><h2 id="练习22："><a href="#练习22：" class="headerlink" title="练习22："></a>练习22：</h2><p>在前面的例子中，为enum写一个switch语句，对于每一个case，输出该特定货币的描述。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">enum Money&#123;</span><br><span class="line">One,Five,Ten,Twe,Fif</span><br><span class="line">&#125;</span><br><span class="line">class A&#123;</span><br><span class="line">void describe(Money s)&#123;</span><br><span class="line">switch(s) &#123;</span><br><span class="line">case One:</span><br><span class="line">System.out.println(&quot;1&quot;);</span><br><span class="line">break;</span><br><span class="line">case Five:</span><br><span class="line">System.out.println(&quot;5&quot;);</span><br><span class="line">break;</span><br><span class="line">case Ten:</span><br><span class="line">System.out.println(&quot;10&quot;);</span><br><span class="line">break;</span><br><span class="line">case Twe:</span><br><span class="line">System.out.println(&quot;20&quot;);</span><br><span class="line">break;</span><br><span class="line">case Fif:</span><br><span class="line">System.out.println(&quot;30&quot;);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public class Test&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">A a = new A();</span><br><span class="line">for(Money s:Money.values()) &#123;</span><br><span class="line">System.out.print(s +&quot;:&quot;);</span><br><span class="line">a.describe(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;/*Output:</span><br><span class="line">One:1</span><br><span class="line">Five:5</span><br><span class="line">Ten:10</span><br><span class="line">Twe:20</span><br><span class="line">Fif:30</span><br><span class="line">*///:~</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Thinking in Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组初始化</title>
      <link href="/2019/08/10/%E6%95%B0%E7%BB%84%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/2019/08/10/%E6%95%B0%E7%BB%84%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>数组初始化</p><a id="more"></a><h2 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int[] a1 = &#123;1,2,3,4,5&#125;;</span><br><span class="line">int[] a2;</span><br><span class="line">a2=a1;</span><br><span class="line">for(int i =0;i&lt;a2.length;i++)</span><br><span class="line">a2[i]=a2[i]+1;</span><br><span class="line">for(int i =0;i&lt;a2.length;i++)</span><br><span class="line">System.out.print(a1[i]+&quot; &quot;);</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line">for(int i =0;i&lt;a2.length;i++)</span><br><span class="line">System.out.print(a2[i]+&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;/*Output:</span><br><span class="line">2 3 4 5 6 </span><br><span class="line">2 3 4 5 6 </span><br><span class="line">*///:~</span><br></pre></td></tr></table></figure><p>a1赋值给了a2，a2赋值后，发现a1数组改变，输出a1和a2后发现相等</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java主函数的调用</title>
      <link href="/2019/08/10/Java%E4%B8%BB%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8/"/>
      <url>/2019/08/10/Java%E4%B8%BB%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>Java主函数的调用</p><a id="more"></a><p>一个java文件里可以存在多个class，但是只能有一个public class</p><p>你可以创建一个String对象数组，将其传递给另一个main（）方法，以提供参数，用来替换传递给该main（）方法的命令行参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class DynamicArray&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Other.main(new String[] &#123;&quot;fiddle&quot;,&quot;de&quot;,&quot;dum&quot;&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Other&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">for(String s:args) &#123;</span><br><span class="line">System.out.println(s+&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;/*Output:</span><br><span class="line">fiddle </span><br><span class="line">de </span><br><span class="line">dum </span><br><span class="line">*///:~</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造器初始化</title>
      <link href="/2019/08/09/%E6%9E%84%E9%80%A0%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/2019/08/09/%E6%9E%84%E9%80%A0%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>构造器初始化</p><a id="more"></a> <h2 id="初始化顺序"><a href="#初始化顺序" class="headerlink" title="初始化顺序"></a>初始化顺序</h2><p>在类的内部，变量定义的先后顺序决定了初始化的顺序。即使变量定义散布于方法定义之间，它们仍会在任何方法（包括构造器）被调用之前得到初始化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class Window&#123;</span><br><span class="line">Window(int marker)&#123;</span><br><span class="line">System.out.println(&quot;Window(&quot;+marker+&quot;)&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class House&#123;</span><br><span class="line">Window w1 = new Window(1);</span><br><span class="line">House()&#123;</span><br><span class="line">System.out.println(&quot;House()&quot;);</span><br><span class="line">w3 = new Window(33);</span><br><span class="line">&#125;</span><br><span class="line">Window w2 = new Window(2);</span><br><span class="line">void f() &#123;</span><br><span class="line">System.out.println(&quot;f()&quot;);</span><br><span class="line">&#125;</span><br><span class="line">Window w3 = new Window(3);</span><br><span class="line">&#125;</span><br><span class="line">public class Flower&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">House h = new House();</span><br><span class="line">h.f();</span><br><span class="line">&#125;</span><br><span class="line">&#125;/*Output:</span><br><span class="line">Window(1)</span><br><span class="line">Window(2)</span><br><span class="line">Window(3)</span><br><span class="line">House()</span><br><span class="line">Window(33)</span><br><span class="line">f()</span><br><span class="line">*///:~</span><br></pre></td></tr></table></figure><p><strong><em>w3这个引用会被初始化两次：一次在调用构造器前，一次在调用期间（第一次引用的对象将被丢弃，并作为垃圾回收）</em></strong></p><h2 id="静态数据的初始化"><a href="#静态数据的初始化" class="headerlink" title="静态数据的初始化"></a>静态数据的初始化</h2><p>1、无论创建多少个对象，静态数据都只占用一份存储区域。<br>2、static关键字不能应用于局部变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">class Bowl&#123;</span><br><span class="line">Bowl(int marker)&#123;</span><br><span class="line">System.out.println(&quot;Bowl(&quot;+marker+&quot;)&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void f1(int marker) &#123;</span><br><span class="line">System.out.println(&quot;f1(&quot;+marker+&quot;)&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Table&#123;</span><br><span class="line">static Bowl bowl1 = new Bowl(1);</span><br><span class="line">Table()&#123;</span><br><span class="line">System.out.println(&quot;Table()&quot;);</span><br><span class="line">bowl2.f1(1);</span><br><span class="line">&#125;</span><br><span class="line">void f2(int marker) &#123;</span><br><span class="line">System.out.println(&quot;f2(&quot;+marker+&quot;)&quot;);</span><br><span class="line">&#125;</span><br><span class="line">static Bowl bowl2 = new Bowl(2);</span><br><span class="line">&#125;</span><br><span class="line">class Cupboard&#123;</span><br><span class="line">Bowl bowl3 = new Bowl(3);</span><br><span class="line">static Bowl bowl4 = new Bowl(4);</span><br><span class="line">Cupboard()&#123;</span><br><span class="line">System.out.println(&quot;Cupboard()&quot;);</span><br><span class="line">bowl4.f1(2);</span><br><span class="line">&#125;</span><br><span class="line">void f3(int marker) &#123;</span><br><span class="line">System.out.println(&quot;f3(&quot;+marker+&quot;)&quot;);</span><br><span class="line">&#125;</span><br><span class="line">static Bowl bowl5 = new Bowl(5);</span><br><span class="line">&#125;</span><br><span class="line">public class Flower&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">System.out.println(&quot;Creating new Cupboard() in main&quot;);</span><br><span class="line">new Cupboard();</span><br><span class="line">System.out.println(&quot;Creating new Cupboard() in main&quot;);</span><br><span class="line">new Cupboard();</span><br><span class="line">table.f2(1);</span><br><span class="line">cupboard.f3(1);</span><br><span class="line">&#125;</span><br><span class="line">static Table table = new Table();</span><br><span class="line">static Cupboard cupboard = new Cupboard();</span><br><span class="line">&#125;/*Output:</span><br><span class="line">Bowl(1)</span><br><span class="line">Bowl(2)</span><br><span class="line">Table()</span><br><span class="line">f1(1)</span><br><span class="line">Bowl(4)</span><br><span class="line">Bowl(5)</span><br><span class="line">Bowl(3)</span><br><span class="line">Cupboard()</span><br><span class="line">f1(2)</span><br><span class="line">Creating new Cupboard() in main</span><br><span class="line">Bowl(3)</span><br><span class="line">Cupboard()</span><br><span class="line">f1(2)</span><br><span class="line">Creating new Cupboard() in main</span><br><span class="line">Bowl(3)</span><br><span class="line">Cupboard()</span><br><span class="line">f1(2)</span><br><span class="line">f2(1)</span><br><span class="line">f3(1)</span><br><span class="line">*///:~</span><br></pre></td></tr></table></figure><p><strong><em>初始化时静态对象会先初始化，而后是非静态对象</em></strong></p><h2 id="总结对象的创建过程"><a href="#总结对象的创建过程" class="headerlink" title="总结对象的创建过程"></a>总结对象的创建过程</h2><p>1、即使没有显式地使用static关键字，构造器实际上也是静态方法。因此，当首次创建类型为Dog的对象时（构造器可以看成静态方法），或者Dog类的静态方法/静态域首次被访问时，Java解释器必须查找类路径，以定位Dog.class文件。<br>2、然后载入Dog.class，有关静态初始化的所有动作都会执行。因此，静态初始化只在Class对象首次加载的时候进行一次。<br>3、当用new Dog()创建对象的时候，首先将在堆上为Dog对象分配足够的存储空间。<br>4、这块存储空间会被清零，这就自动地将Dog对象中地所有基本类型数据设置成了默认值（对数字来说就是0，对布尔型和字符型也相同），而引用则被设置成了null。<br>5、执行所有出现于字段定义处地初始化动作。<br>6、执行构造器。</p><h2 id="显式的静态初始化（代码不理解，这里先做下标记把，有空再慢慢看）"><a href="#显式的静态初始化（代码不理解，这里先做下标记把，有空再慢慢看）" class="headerlink" title="显式的静态初始化（代码不理解，这里先做下标记把，有空再慢慢看）"></a>显式的静态初始化（代码不理解，这里先做下标记把，有空再慢慢看）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class Cup&#123;</span><br><span class="line">Cup(int marker)&#123;</span><br><span class="line">System.out.println(&quot;Cup(&quot;+marker+&quot;)&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void f(int marker) &#123;</span><br><span class="line">System.out.println(&quot;f(&quot;+marker+&quot;)&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Cups&#123;</span><br><span class="line">static Cup cup1;</span><br><span class="line">static Cup cup2;</span><br><span class="line">static &#123;</span><br><span class="line">cup1 = new Cup(1);</span><br><span class="line">cup2 = new Cup(2);</span><br><span class="line">&#125;</span><br><span class="line">Cups()&#123;</span><br><span class="line">System.out.println(&quot;Cups()&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Flower&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">System.out.println(&quot;Inside main()&quot;);</span><br><span class="line">Cups.cup1.f(99);</span><br><span class="line">&#125;</span><br><span class="line">&#125;/*Output:</span><br><span class="line">Inside main()</span><br><span class="line">Cup(1)</span><br><span class="line">Cup(2)</span><br><span class="line">f(99)</span><br><span class="line">*///:~</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 初始化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this关键字</title>
      <link href="/2019/08/09/this%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2019/08/09/this%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>编程思想第五章5.4中,这一段代码看着有点懵逼，记下来</p><a id="more"></a> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">void eat(Apple apple) &#123;</span><br><span class="line">Apple peeled =apple.getPeeled();</span><br><span class="line">System.out.println(&quot;Yummy&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Peeler&#123;</span><br><span class="line">static Apple peel(Apple apple) &#123;</span><br><span class="line">return apple;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Apple&#123;</span><br><span class="line">Apple getPeeled() &#123;</span><br><span class="line">return Peeler.peel(this);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Leaf &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">new Person().eat(new Apple());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>Apple需要调用Peeler.peel（）方法，它是一个外部的工具方法，将执行由于某种原因而必须放在Apple外部的操作。为了将自身传递给外部方法，Apple必须使用this关键字。</em></strong></p><h2 id="在构造器中调用构造器"><a href="#在构造器中调用构造器" class="headerlink" title="在构造器中调用构造器"></a>在构造器中调用构造器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class Flower&#123;</span><br><span class="line">int petalCount = 0;</span><br><span class="line">String s=&quot;initial value&quot;;</span><br><span class="line">Flower(int petals)&#123;</span><br><span class="line">petalCount = petals;</span><br><span class="line">System.out.println(&quot;Constructor w/ int arg only,petalCount= &quot;+petalCount);</span><br><span class="line">&#125;</span><br><span class="line">Flower(String ss)&#123;</span><br><span class="line">System.out.println(&quot;Constructor w/ String arg only,s= &quot;+ss);</span><br><span class="line">s=ss;</span><br><span class="line">&#125;</span><br><span class="line">Flower(String s,int petals)&#123;</span><br><span class="line">this(petals);</span><br><span class="line">//this(s); //Can&apos;t call two!</span><br><span class="line">this.s=s;</span><br><span class="line">System.out.println(&quot;String &amp; int args&quot;);</span><br><span class="line">&#125;</span><br><span class="line">Flower()&#123;</span><br><span class="line">this(&quot;hi&quot;,47);</span><br><span class="line">System.out.println(&quot;default constructor (no args)&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void printPetalCount() &#123;</span><br><span class="line">//this(11); //Not inside non-constructor!</span><br><span class="line">System.out.println(&quot;petalCount = &quot;+petalCount+&quot; s= &quot;+s);</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Flower x = new Flower();</span><br><span class="line">x.printPetalCount();</span><br><span class="line">&#125;</span><br><span class="line">&#125;/*Output:</span><br><span class="line">Constructor w/ int arg only,petalCount= 47</span><br><span class="line">String &amp; int args</span><br><span class="line">default constructor (no args)</span><br><span class="line">petalCount = 47 s= hi</span><br><span class="line">*///:~</span><br></pre></td></tr></table></figure><p><strong><em>this调用构造器不能调用两个。</em></strong><br><strong><em>构造器调用必须置于起始值。</em></strong><br><strong><em>调用构造器只能在构造器中调用</em></strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java方法重载</title>
      <link href="/2019/08/08/Java%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BD/"/>
      <url>/2019/08/08/Java%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>Java方法重载</p><a id="more"></a><h2 id="示范重载构造器和重载的方法"><a href="#示范重载构造器和重载的方法" class="headerlink" title="示范重载构造器和重载的方法"></a>示范重载构造器和重载的方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">class Tree&#123;</span><br><span class="line">int height;</span><br><span class="line">Tree()&#123;</span><br><span class="line">System.out.println(&quot;Planting a seedling&quot;);</span><br><span class="line">height= 0;</span><br><span class="line">&#125;</span><br><span class="line">Tree(int initialHeight)&#123;</span><br><span class="line">height = initialHeight;</span><br><span class="line">System.out.println(&quot;Creating new Tree that is &quot;+height+&quot; feet tall&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void info() &#123;</span><br><span class="line">System.out.println(&quot;Tree is &quot;+height+&quot;feet tall&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void info(String s) &#123;</span><br><span class="line">System.out.println(s+&quot;:Tree is &quot;+height+&quot;feet tall&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Overloading &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">for(int i=0;i&lt;5;i++) &#123;</span><br><span class="line">Tree t = new Tree(i);</span><br><span class="line">t.info();</span><br><span class="line">t.info(&quot;overloaded method&quot;);</span><br><span class="line">&#125;</span><br><span class="line">new Tree();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;/*Output:</span><br><span class="line">Creating new Tree that is 0 feet tall</span><br><span class="line">Tree is 0feet tall</span><br><span class="line">overloaded method:Tree is 0feet tall</span><br><span class="line">Creating new Tree that is 1 feet tall</span><br><span class="line">Tree is 1feet tall</span><br><span class="line">overloaded method:Tree is 1feet tall</span><br><span class="line">Creating new Tree that is 2 feet tall</span><br><span class="line">Tree is 2feet tall</span><br><span class="line">overloaded method:Tree is 2feet tall</span><br><span class="line">Creating new Tree that is 3 feet tall</span><br><span class="line">Tree is 3feet tall</span><br><span class="line">overloaded method:Tree is 3feet tall</span><br><span class="line">Creating new Tree that is 4 feet tall</span><br><span class="line">Tree is 4feet tall</span><br><span class="line">overloaded method:Tree is 4feet tall</span><br><span class="line">Planting a seedling</span><br><span class="line">*///:~</span><br></pre></td></tr></table></figure><h2 id="涉及基本类型的重载"><a href="#涉及基本类型的重载" class="headerlink" title="涉及基本类型的重载"></a>涉及基本类型的重载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line">public class PrimitiveOverloading &#123;</span><br><span class="line">void f1(char x) &#123;</span><br><span class="line">System.out.println(&quot;f1(char) &quot;);</span><br><span class="line">&#125;</span><br><span class="line">void f1(byte x) &#123;</span><br><span class="line">System.out.println(&quot;f1(byte) &quot;);</span><br><span class="line">&#125;</span><br><span class="line">void f1(short x) &#123;</span><br><span class="line">System.out.println(&quot;f1(short) &quot;);</span><br><span class="line">&#125;</span><br><span class="line">void f1(int x) &#123;</span><br><span class="line">System.out.println(&quot;f1(int) &quot;);</span><br><span class="line">&#125;</span><br><span class="line">void f1(long x) &#123;</span><br><span class="line">System.out.println(&quot;f1(long) &quot;);</span><br><span class="line">&#125;</span><br><span class="line">void f1(float x) &#123;</span><br><span class="line">System.out.println(&quot;f1(float) &quot;);</span><br><span class="line">&#125;</span><br><span class="line">void f1(double x) &#123;</span><br><span class="line">System.out.println(&quot;f1(double) &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void f2(byte x) &#123;</span><br><span class="line">System.out.println(&quot;f2(byte) &quot;);</span><br><span class="line">&#125;</span><br><span class="line">void f2(short x) &#123;</span><br><span class="line">System.out.println(&quot;f2(short) &quot;);</span><br><span class="line">&#125;</span><br><span class="line">void f2(int x) &#123;</span><br><span class="line">System.out.println(&quot;f2(int) &quot;);</span><br><span class="line">&#125;</span><br><span class="line">void f2(long x) &#123;</span><br><span class="line">System.out.println(&quot;f2(long) &quot;);</span><br><span class="line">&#125;</span><br><span class="line">void f2(float x) &#123;</span><br><span class="line">System.out.println(&quot;f2(float) &quot;);</span><br><span class="line">&#125;</span><br><span class="line">void f2(double x) &#123;</span><br><span class="line">System.out.println(&quot;f2(double) &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void f3(short x) &#123;</span><br><span class="line">System.out.println(&quot;f3(short) &quot;);</span><br><span class="line">&#125;</span><br><span class="line">void f3(int x) &#123;</span><br><span class="line">System.out.println(&quot;f3(int) &quot;);</span><br><span class="line">&#125;</span><br><span class="line">void f3(long x) &#123;</span><br><span class="line">System.out.println(&quot;f3(long) &quot;);</span><br><span class="line">&#125;</span><br><span class="line">void f3(float x) &#123;</span><br><span class="line">System.out.println(&quot;f3(float) &quot;);</span><br><span class="line">&#125;</span><br><span class="line">void f3(double x) &#123;</span><br><span class="line">System.out.println(&quot;f3(double) &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void f4(int x) &#123;</span><br><span class="line">System.out.println(&quot;f4(int) &quot;);</span><br><span class="line">&#125;</span><br><span class="line">void f4(long x) &#123;</span><br><span class="line">System.out.println(&quot;f4(long) &quot;);</span><br><span class="line">&#125;</span><br><span class="line">void f4(float x) &#123;</span><br><span class="line">System.out.println(&quot;f4(float) &quot;);</span><br><span class="line">&#125;</span><br><span class="line">void f4(double x) &#123;</span><br><span class="line">System.out.println(&quot;f4(double) &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void f5(long x) &#123;</span><br><span class="line">System.out.println(&quot;f5(long) &quot;);</span><br><span class="line">&#125;</span><br><span class="line">void f5(float x) &#123;</span><br><span class="line">System.out.println(&quot;f5(float) &quot;);</span><br><span class="line">&#125;</span><br><span class="line">void f5(double x) &#123;</span><br><span class="line">System.out.println(&quot;f5(double) &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void f6(float x) &#123;</span><br><span class="line">System.out.println(&quot;f6(float) &quot;);</span><br><span class="line">&#125;</span><br><span class="line">void f6(double x) &#123;</span><br><span class="line">System.out.println(&quot;f6(double) &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void f7(double x) &#123;</span><br><span class="line">System.out.println(&quot;f7(double) &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void testConstVal() &#123;</span><br><span class="line">System.out.println(&quot;5: &quot;);</span><br><span class="line">f1(5);f2(5);f3(5);f4(5);f5(5);f6(5);f7(5);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">void testChar() &#123;</span><br><span class="line">char x = &apos;x&apos;;</span><br><span class="line">System.out.println(&quot;char: &quot;);</span><br><span class="line">f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">void testByte() &#123;</span><br><span class="line">byte x =0;</span><br><span class="line">System.out.println(&quot;byte: &quot;);</span><br><span class="line">f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">void testShort() &#123;</span><br><span class="line">short x =0;</span><br><span class="line">System.out.println(&quot;short: &quot;);</span><br><span class="line">f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">void testInt() &#123;</span><br><span class="line">int x =0;</span><br><span class="line">System.out.println(&quot;int: &quot;);</span><br><span class="line">f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">void testLong() &#123;</span><br><span class="line">long x =0;</span><br><span class="line">System.out.println(&quot;long: &quot;);</span><br><span class="line">f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">void testFloat() &#123;</span><br><span class="line">float x =0;</span><br><span class="line">System.out.println(&quot;float: &quot;);</span><br><span class="line">f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">void testDouble() &#123;</span><br><span class="line">double x =0;</span><br><span class="line">System.out.println(&quot;double: &quot;);</span><br><span class="line">f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">PrimitiveOverloading p = new PrimitiveOverloading();</span><br><span class="line">p.testConstVal();</span><br><span class="line">p.testChar();</span><br><span class="line">p.testByte();</span><br><span class="line">p.testShort();</span><br><span class="line">p.testInt();</span><br><span class="line">p.testLong();</span><br><span class="line">p.testFloat();</span><br><span class="line">p.testDouble();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;/*Output:</span><br><span class="line">5: f1(int) f2(int) f3(int) f4(int) f5(long) f6(float) f7(double) </span><br><span class="line">char: </span><br><span class="line">f1(char) f2(int) f3(int) f4(int) f5(long) f6(float) f7(double) </span><br><span class="line">byte: </span><br><span class="line">f1(byte) f2(byte) f3(short) f4(int) f5(long) f6(float) f7(double) </span><br><span class="line">short: </span><br><span class="line">f1(short) f2(short) f3(short) f4(int) f5(long) f6(float) f7(double) </span><br><span class="line">int: </span><br><span class="line">f1(int) f2(int) f3(int) f4(int) f5(long) f6(float) f7(double) </span><br><span class="line">long: </span><br><span class="line">f1(long) f2(long) f3(long) f4(long) f5(long) f6(float) f7(double) </span><br><span class="line">float: </span><br><span class="line">f1(float) f2(float) f3(float) f4(float) f5(float) f6(float) f7(double) </span><br><span class="line">double: </span><br><span class="line">f1(double) f2(double) f3(double) f4(double) f5(double) f6(double) f7(double) </span><br><span class="line">*///:~</span><br></pre></td></tr></table></figure><p><strong>如果传入的数据类型（实际参数类型）小于方法中声明的形式参数类型，实际数据类型就会被提升。char型略有不同，如果无法找到恰好接受char参数的方法，就会把char直接提升至int型。</strong></p><h2 id="如果传入的实际参数较大，就得通过类型转换来执行窄化转换。如果不这样做，编译器就会报错。"><a href="#如果传入的实际参数较大，就得通过类型转换来执行窄化转换。如果不这样做，编译器就会报错。" class="headerlink" title="如果传入的实际参数较大，就得通过类型转换来执行窄化转换。如果不这样做，编译器就会报错。"></a>如果传入的实际参数较大，就得通过类型转换来执行窄化转换。如果不这样做，编译器就会报错。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void testDouble() &#123;</span><br><span class="line">double x =0;</span><br><span class="line">System.out.println(&quot;double  argument: &quot;);</span><br><span class="line">f1(x);f2((double)x);f3((long)x);f4((int)x);f5((short)x);f6((byte)x);f7((char)x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 重载 </tag>
            
            <tag> Thinking in Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java标签</title>
      <link href="/2019/08/07/Java%E6%A0%87%E7%AD%BE/"/>
      <url>/2019/08/07/Java%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<p>Java标签</p><a id="more"></a><h2 id="Java标签-博文内容剽窃于Thinking-in-Java第四版四章4-7-●’◡’●"><a href="#Java标签-博文内容剽窃于Thinking-in-Java第四版四章4-7-●’◡’●" class="headerlink" title="Java标签,博文内容剽窃于Thinking in Java第四版四章4.7  (●’◡’●)"></a>Java标签,博文内容剽窃于Thinking in Java第四版四章4.7  (●’◡’●)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">label1:</span><br><span class="line">outer-iteration&#123;</span><br><span class="line">    inner-iteration&#123;</span><br><span class="line">        //...</span><br><span class="line">        break; //(1)</span><br><span class="line">        //...</span><br><span class="line">        continue; //(2)</span><br><span class="line">        //...</span><br><span class="line">        continue label1; //(3)</span><br><span class="line">        //...</span><br><span class="line">        break label1; //(4)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在（1）中，break中断内部迭代。<br>在（2）中，continue使执行点移回内部迭代的起始值。<br>在（3）中，continue label1同时中断内部迭代以及外部迭代，直接转到label1处；随后，它实际上是继续迭代过程，但却从外部迭代开始。<br>在（4）中，break label1也会中断所有迭代，并回到label1处，但并不重新进入迭代。也就是说，它实际是完全中止了两个迭代。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">    int i=0;</span><br><span class="line">    outer:</span><br><span class="line">    for(;true;) &#123;</span><br><span class="line">    inner:</span><br><span class="line">    for(;i&lt;10;i++) &#123;</span><br><span class="line">    System.out.println(&quot;i= &quot;+i);</span><br><span class="line">    if(i==2) &#123;</span><br><span class="line">    System.out.println(&quot;continue&quot;);</span><br><span class="line">    continue;</span><br><span class="line">    &#125;</span><br><span class="line">    if(i==3) &#123;</span><br><span class="line">    System.out.println(&quot;break&quot;);</span><br><span class="line">    i++;    //由于break跳过了递增表达式，所以这里添加了递增运算</span><br><span class="line">    break;</span><br><span class="line">    &#125;</span><br><span class="line">    if(i==7) &#123;</span><br><span class="line">    System.out.println(&quot;continue outer&quot;);</span><br><span class="line">    i++;    //添加了递增运算</span><br><span class="line">    continue outer;</span><br><span class="line">    &#125;</span><br><span class="line">    if(i==8) &#123;</span><br><span class="line">    System.out.println(&quot;break outer&quot;);</span><br><span class="line">    break outer;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int k=0;k&lt;5;k++) &#123;</span><br><span class="line">    if(k==3) &#123;</span><br><span class="line">    System.out.println(&quot;continue inner&quot;);</span><br><span class="line">    continue inner;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Output:<br>i= 0<br>continue inner<br>i= 1<br>continue inner<br>i= 2<br>continue<br>i= 3<br>break<br>i= 4<br>continue inner<br>i= 5<br>continue inner<br>i= 6<br>continue inner<br>i= 7<br>continue outer<br>i= 8<br>break outer</p></blockquote><p><strong><em>break和continue本身只能中断最内层的循环</em></strong></p><h2 id="带标签的break以及continue语句在while循环中的用法："><a href="#带标签的break以及continue语句在while循环中的用法：" class="headerlink" title="带标签的break以及continue语句在while循环中的用法："></a>带标签的break以及continue语句在while循环中的用法：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">    int i=0;</span><br><span class="line">    outer:</span><br><span class="line">    while(true) &#123;</span><br><span class="line">    System.out.println(&quot;Outer while loop&quot;);</span><br><span class="line">    while(true) &#123;</span><br><span class="line">    i++;</span><br><span class="line">    System.out.println(&quot;i= &quot;+i);</span><br><span class="line">    if(i==1) &#123;</span><br><span class="line">    System.out.println(&quot;continue&quot;);</span><br><span class="line">    continue;</span><br><span class="line">    &#125;</span><br><span class="line">    if(i==3) &#123;</span><br><span class="line">System.out.println(&quot;continue outer&quot;);</span><br><span class="line">continue outer;</span><br><span class="line">&#125;</span><br><span class="line">    if(i==5) &#123;</span><br><span class="line">System.out.println(&quot;break&quot;);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">    if(i==7) &#123;</span><br><span class="line">System.out.println(&quot;break outer&quot;);</span><br><span class="line">break outer;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Output:<br>Outer while loop<br>i= 1<br>continue<br>i= 2<br>i= 3<br>continue outer<br>Outer while loop<br>i= 4<br>i= 5<br>break<br>Outer while loop<br>i= 6<br>i= 7<br>break outer</p></blockquote><p>同样的规则亦适用于while:<br>1、一般的continue会退出最内层循环开头（顶部），并继续执行。<br>2、带标签的continue会到达标签的位置，并重新进入紧接在那个标签后面的循环。<br>3、一般的break会中断并跳出当前循环。<br>4、带标签的break会中断并跳出标签所指的循环。</p><h2 id="在Java里需要使用标签的唯一理由就是因为有循环嵌套存在，而且想从多层嵌套中break或continue。"><a href="#在Java里需要使用标签的唯一理由就是因为有循环嵌套存在，而且想从多层嵌套中break或continue。" class="headerlink" title="在Java里需要使用标签的唯一理由就是因为有循环嵌套存在，而且想从多层嵌套中break或continue。"></a>在Java里需要使用标签的唯一理由就是因为有循环嵌套存在，而且想从多层嵌套中break或continue。</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程思想第四章练习</title>
      <link href="/2019/08/07/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E7%AC%AC%E5%9B%9B%E7%AB%A0%E7%BB%83%E4%B9%A0/"/>
      <url>/2019/08/07/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E7%AC%AC%E5%9B%9B%E7%AB%A0%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>Java编程思想第四章练习</p><a id="more"></a><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><h3 id="练习1："><a href="#练习1：" class="headerlink" title="练习1："></a>练习1：</h3><p>写一个程序，打印从1到100的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">for(int i=1;i&lt;=100;i++) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习2："><a href="#练习2：" class="headerlink" title="练习2："></a>练习2：</h3><p>写一个程序,产生25个int类型的随机数.对于每一个随机值,使用if-else语句来讲其分类为大于，小于,或等于紧随它产生的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int num[] =new int[25];</span><br><span class="line">        for (int i=0;i&lt;25;i++)&#123;</span><br><span class="line">            num[i]=(int)(Math.random()*100);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        for (int j=0;j&lt;num.length-1;j++)&#123;//一共产生了25个数，需要比较24次，所以j的循环次数是num.length-1次。</span><br><span class="line">            if (num[j]&gt;num[j+1])&#123;</span><br><span class="line">                System.out.println(num[j]+&quot;大于&quot;+&quot;后面的数&quot;+num[j+1]);</span><br><span class="line">            &#125;</span><br><span class="line">            else if (num[j]&lt;num[j+1])&#123;</span><br><span class="line">                System.out.println(num[j]+&quot;小于&quot;+&quot;后面的数&quot;+num[j+1]);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                System.out.println(num[j]+&quot;等于&quot;+&quot;后面的数&quot;+num[j+1]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行及结果：<br>39小于后面的数70<br>70大于后面的数30<br>30小于后面的数61<br>61大于后面的数57<br>57小于后面的数76<br>76小于后面的数83<br>83大于后面的数13<br>13大于后面的数3<br>3小于后面的数38<br>38小于后面的数60<br>60大于后面的数57<br>57小于后面的数75<br>75大于后面的数12<br>12小于后面的数52<br>52小于后面的数62<br>62小于后面的数84<br>84大于后面的数51<br>51大于后面的数18<br>18小于后面的数59<br>59小于后面的数64<br>64大于后面的数41<br>41小于后面的数98<br>98大于后面的数54<br>54大于后面的数51</p></blockquote><h3 id="练习4："><a href="#练习4：" class="headerlink" title="练习4："></a>练习4：</h3><p>写一个程序,使用两个嵌套的for循环和取余操作符来探测和打印素数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">    boolean flog;</span><br><span class="line">    for(int i=2;i&lt;=100;i++) &#123;</span><br><span class="line">    flog=true;</span><br><span class="line">    for(int j=2;j&lt;i;j++) &#123;</span><br><span class="line">    if(i%j==0) &#123;</span><br><span class="line">    flog=false;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(flog==true) &#123;</span><br><span class="line">    System.out.println(i+&quot; &quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">2 </span><br><span class="line">3 </span><br><span class="line">5 </span><br><span class="line">7 </span><br><span class="line">11 </span><br><span class="line">13 </span><br><span class="line">17 </span><br><span class="line">19 </span><br><span class="line">23 </span><br><span class="line">29 </span><br><span class="line">31 </span><br><span class="line">37 </span><br><span class="line">41 </span><br><span class="line">43 </span><br><span class="line">47 </span><br><span class="line">53 </span><br><span class="line">59 </span><br><span class="line">61 </span><br><span class="line">67 </span><br><span class="line">71 </span><br><span class="line">73 </span><br><span class="line">79 </span><br><span class="line">83 </span><br><span class="line">89 </span><br><span class="line">97</span><br></pre></td></tr></table></figure><h3 id="练习5："><a href="#练习5：" class="headerlink" title="练习5："></a>练习5：</h3><p>重复第三章中的练习10，不要用Integer.toBinaryString()方法，而是用三元操作符和按位操作符来显示二进制0和1. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emmmmmmmmmm</span><br></pre></td></tr></table></figure><h2 id="练习7："><a href="#练习7：" class="headerlink" title="练习7："></a>练习7：</h2><p>修改本章练习1，通过使用break关键词（或者return关键词），使其只输出范围为1~99的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">    for(int i=0;i&lt;100;i++) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    if(i==99)</span><br><span class="line">    break; //return</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Thinking in Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中break和continue的区别</title>
      <link href="/2019/08/07/Java%E4%B8%ADbreak%E5%92%8Ccontinue%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/08/07/Java%E4%B8%ADbreak%E5%92%8Ccontinue%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>Java中break和continue的区别</p><a id="more"></a><h2 id="在任何迭代语句的主体部分，都可用break和continue控制循环的流程"><a href="#在任何迭代语句的主体部分，都可用break和continue控制循环的流程" class="headerlink" title="在任何迭代语句的主体部分，都可用break和continue控制循环的流程"></a>在任何迭代语句的主体部分，都可用break和continue控制循环的流程</h2><h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><p>1、break用于强行退出循环。<br>2、退出后不执行循环中剩余的语句</p><h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><p>1、停止执行当前的迭代<br>2、退回循环起始处，开始下一次迭代</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">    for(int i=0;i&lt;=5;i++) &#123;</span><br><span class="line">    if(i==3) &#123;</span><br><span class="line">    break;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    System.out.println(&quot;===============&quot;);</span><br><span class="line">    for(int i=0;i&lt;=5;i++) &#123;</span><br><span class="line">    if(i==3) &#123;</span><br><span class="line">    continue;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行及结果：<br>0<br>1<br>2<br>分隔符<br>0<br>1<br>2<br>4<br>5</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> break </tag>
            
            <tag> continue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Foreach语句</title>
      <link href="/2019/08/07/Foreach%E8%AF%AD%E5%8F%A5/"/>
      <url>/2019/08/07/Foreach%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<p>Foreach语句</p><a id="more"></a><h2 id="java-SE5引入了一种新的更加简洁的for语法用于数组和容器，即foreach语法，表示不必创建int变量去对由访问项构成的序列进行计数，foreach将自动产生每一项。"><a href="#java-SE5引入了一种新的更加简洁的for语法用于数组和容器，即foreach语法，表示不必创建int变量去对由访问项构成的序列进行计数，foreach将自动产生每一项。" class="headerlink" title="java SE5引入了一种新的更加简洁的for语法用于数组和容器，即foreach语法，表示不必创建int变量去对由访问项构成的序列进行计数，foreach将自动产生每一项。"></a>java SE5引入了一种新的更加简洁的for语法用于数组和容器，即foreach语法，表示不必创建int变量去对由访问项构成的序列进行计数，foreach将自动产生每一项。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Random;</span><br><span class="line"></span><br><span class="line">public class ForEachFloat&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Random rand = new Random(47);</span><br><span class="line">        float f[] = new float[10];</span><br><span class="line">        for(int i = 0;i &lt; 10;i++)</span><br><span class="line">            f[i]=rand.nextFloat();</span><br><span class="line">        for(float x:f)</span><br><span class="line">            System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行及结果：<br>0.72711575<br>0.39982635<br>0.5309454<br>0.0534122<br>0.16020656<br>0.57799757<br>0.18847865<br>0.4170137<br>0.51660204<br>0.73734957</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class ForEachFloat&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        for(char c:&quot;An African Swallow&quot;.toCharArray())</span><br><span class="line">        System.out.print(c+&quot; &quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行及结果：<br>A n   A f r i c a n   S w a l l o w </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Foreach </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>截尾和舍入</title>
      <link href="/2019/08/05/%E6%88%AA%E5%B0%BE%E5%92%8C%E8%88%8D%E5%85%A5/"/>
      <url>/2019/08/05/%E6%88%AA%E5%B0%BE%E5%92%8C%E8%88%8D%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p>在执行窄化转换时，必须注意截尾与舍入问题。例如：如果将一个浮点值转换整形值，Java会如何处理？</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class CastingNumbers &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">double above = 0.7,below = 0.4;</span><br><span class="line">float fabove = 0.7f,fbelow = 0.4f;</span><br><span class="line">System.out.println(&quot;(int)above: &quot;+(int)above);</span><br><span class="line">System.out.println(&quot;(int)below: &quot;+(int)below);</span><br><span class="line">System.out.println(&quot;(int)fabove: &quot;+(int)fabove);</span><br><span class="line">System.out.println(&quot;(int)fbelow: &quot;+(int)fbelow);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行及结果：<br>(int)above: 0<br>(int)below: 0<br>(int)fabove: 0<br>(int)fbelow: 0</p></blockquote><p><strong>运行结果发现，在将float和double转型为整数值时，总是对该数字执行截尾。如果想要得到舍入的结果，就需要使用java.lang.Math中的round()方法。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class CastingNumbers &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">double above = 0.7,below = 0.4;</span><br><span class="line">float fabove = 0.7f,fbelow = 0.4f;</span><br><span class="line">System.out.println(&quot;Math.round(above): &quot;+Math.round(above));</span><br><span class="line">System.out.println(&quot;Math.round(below): &quot;+Math.round(below));</span><br><span class="line">System.out.println(&quot;Math.round(fabove): &quot;+Math.round(fabove));</span><br><span class="line">System.out.println(&quot;Math.round(fbelow): &quot;+Math.round(fbelow));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行及结果:<br>Math.round(above): 1<br>Math.round(below): 0<br>Math.round(fabove): 1<br>Math.round(fbelow): 0</p></blockquote><p><strong>由于round()是java.lang的一部分，因此在使用它时不需要额外地导入。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Thinking in Java </tag>
            
            <tag> 数据类型转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>涉及按位操作的所有操作符（求二进制）</title>
      <link href="/2019/08/05/%E6%B6%89%E5%8F%8A%E6%8C%89%E4%BD%8D%E6%93%8D%E4%BD%9C%E7%9A%84%E6%89%80%E6%9C%89%E6%93%8D%E4%BD%9C%E7%AC%A6%EF%BC%88%E6%B1%82%E4%BA%8C%E8%BF%9B%E5%88%B6%EF%BC%89/"/>
      <url>/2019/08/05/%E6%B6%89%E5%8F%8A%E6%8C%89%E4%BD%8D%E6%93%8D%E4%BD%9C%E7%9A%84%E6%89%80%E6%9C%89%E6%93%8D%E4%BD%9C%E7%AC%A6%EF%BC%88%E6%B1%82%E4%BA%8C%E8%BF%9B%E5%88%B6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>涉及按位操作的所有操作符（求二进制）</p><a id="more"></a><p>代码以下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Random;</span><br><span class="line"></span><br><span class="line">public class BitManipulation&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Random rand = new Random(47);</span><br><span class="line">int i = rand.nextInt();</span><br><span class="line">int j = rand.nextInt();</span><br><span class="line">printBinaryInt(&quot;-1&quot;,-1);</span><br><span class="line">printBinaryInt(&quot;+1&quot;,+1);</span><br><span class="line">int maxpos = 2147483647;</span><br><span class="line">printBinaryInt(&quot;maxpos&quot;,maxpos);</span><br><span class="line">int maxneg = -2147483648;</span><br><span class="line">printBinaryInt(&quot;maxpos&quot;,maxneg);</span><br><span class="line">printBinaryInt(&quot;i&quot;,i);</span><br><span class="line">printBinaryInt(&quot;~i&quot;,~i);</span><br><span class="line">printBinaryInt(&quot;-i&quot;,-i);</span><br><span class="line">printBinaryInt(&quot;j&quot;,j);</span><br><span class="line">printBinaryInt(&quot;i&amp;j&quot;,i&amp;j);</span><br><span class="line">printBinaryInt(&quot;i|j&quot;,i|j);</span><br><span class="line">printBinaryInt(&quot;i^j&quot;,i^j); //不同为1，相同为0</span><br><span class="line">printBinaryInt(&quot;i&lt;&lt;5&quot;,i&lt;&lt;5);</span><br><span class="line">printBinaryInt(&quot;i&gt;&gt;5&quot;,i&gt;&gt;5);</span><br><span class="line">printBinaryInt(&quot;(~i)&gt;&gt;5&quot;,(~i)&gt;&gt;5);</span><br><span class="line">printBinaryInt(&quot;i&gt;&gt;&gt;5&quot;,i&gt;&gt;&gt;5);</span><br><span class="line">printBinaryInt(&quot;(~i)&gt;&gt;&gt;5&quot;,(~i)&gt;&gt;&gt;5);</span><br><span class="line"></span><br><span class="line">long l = rand.nextLong();</span><br><span class="line">long m = rand.nextLong();</span><br><span class="line">printBinaryLong(&quot;-1L&quot;,-1L);</span><br><span class="line">printBinaryLong(&quot;+1L&quot;,+1L);</span><br><span class="line">long ll = 9223372036854775807L;</span><br><span class="line">printBinaryLong(&quot;maxpos&quot;,ll);</span><br><span class="line">long lln = -9223372036854775808L;</span><br><span class="line">printBinaryLong(&quot;maxneg&quot;,lln);</span><br><span class="line">printBinaryLong(&quot;l&quot;,l);</span><br><span class="line">printBinaryLong(&quot;~l&quot;,~l);</span><br><span class="line">printBinaryLong(&quot;-l&quot;,-l);</span><br><span class="line">printBinaryLong(&quot;m&quot;,m);</span><br><span class="line">printBinaryLong(&quot;l&amp;m&quot;,l&amp;m);</span><br><span class="line">printBinaryLong(&quot;l|m&quot;,l|m);</span><br><span class="line">printBinaryLong(&quot;l^m&quot;,l^m);</span><br><span class="line">printBinaryLong(&quot;l&lt;&lt;5&quot;,l&lt;&lt;5);</span><br><span class="line">printBinaryLong(&quot;l&gt;&gt;5&quot;,l&gt;&gt;5);</span><br><span class="line">printBinaryLong(&quot;(~l)&gt;&gt;5&quot;,(~l)&gt;&gt;5);</span><br><span class="line">printBinaryLong(&quot;l&gt;&gt;&gt;5&quot;,l&gt;&gt;&gt;5);</span><br><span class="line">printBinaryLong(&quot;(~l)&gt;&gt;&gt;5&quot;,(~l)&gt;&gt;&gt;5);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void printBinaryInt(String s, int i) &#123;</span><br><span class="line">System.out.println(s+&quot;,int: &quot;+i+&quot;.binary:\n &quot;+Integer.toBinaryString(i));</span><br><span class="line">&#125;</span><br><span class="line">static void printBinaryLong(String s, long l) &#123;</span><br><span class="line">System.out.println(s+&quot;,long: &quot;+l+&quot;.binary:\n &quot;+Long.toBinaryString(l));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行及结果：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">-1,int: -1.binary:</span><br><span class="line"> 11111111111111111111111111111111</span><br><span class="line">+1,int: 1.binary:</span><br><span class="line"> 1</span><br><span class="line">maxpos,int: 2147483647.binary:</span><br><span class="line"> 1111111111111111111111111111111</span><br><span class="line">maxpos,int: -2147483648.binary:</span><br><span class="line"> 10000000000000000000000000000000</span><br><span class="line">i,int: -1172028779.binary:</span><br><span class="line"> 10111010001001000100001010010101</span><br><span class="line">~i,int: 1172028778.binary:</span><br><span class="line"> 1000101110110111011110101101010</span><br><span class="line">-i,int: 1172028779.binary:</span><br><span class="line"> 1000101110110111011110101101011</span><br><span class="line">j,int: 1717241110.binary:</span><br><span class="line"> 1100110010110110000010100010110</span><br><span class="line">i&amp;j,int: 570425364.binary:</span><br><span class="line"> 100010000000000000000000010100</span><br><span class="line">i|j,int: -25213033.binary:</span><br><span class="line"> 11111110011111110100011110010111</span><br><span class="line">i^j,int: -595638397.binary:</span><br><span class="line"> 11011100011111110100011110000011</span><br><span class="line">i&lt;&lt;5,int: 1149784736.binary:</span><br><span class="line"> 1000100100010000101001010100000</span><br><span class="line">i&gt;&gt;5,int: -36625900.binary:</span><br><span class="line"> 11111101110100010010001000010100</span><br><span class="line">(~i)&gt;&gt;5,int: 36625899.binary:</span><br><span class="line"> 10001011101101110111101011</span><br><span class="line">i&gt;&gt;&gt;5,int: 97591828.binary:</span><br><span class="line"> 101110100010010001000010100</span><br><span class="line">(~i)&gt;&gt;&gt;5,int: 36625899.binary:</span><br><span class="line"> 10001011101101110111101011</span><br><span class="line">-1L,long: -1.binary:</span><br><span class="line"> 1111111111111111111111111111111111111111111111111111111111111111</span><br><span class="line">+1L,long: 1.binary:</span><br><span class="line"> 1</span><br><span class="line">maxpos,long: 9223372036854775807.binary:</span><br><span class="line"> 111111111111111111111111111111111111111111111111111111111111111</span><br><span class="line">maxneg,long: -9223372036854775808.binary:</span><br><span class="line"> 1000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">l,long: -8652529054300476342.binary:</span><br><span class="line"> 1000011111101100000010101010101100001101101011000110110001001010</span><br><span class="line">~l,long: 8652529054300476341.binary:</span><br><span class="line"> 111100000010011111101010101010011110010010100111001001110110101</span><br><span class="line">-l,long: 8652529054300476342.binary:</span><br><span class="line"> 111100000010011111101010101010011110010010100111001001110110110</span><br><span class="line">m,long: 2955289354441303771.binary:</span><br><span class="line"> 10100100000011010011000000001010010011111101111010011011011011</span><br><span class="line">l&amp;m,long: 72066398748419146.binary:</span><br><span class="line"> 100000000000010000000001000000001101001000010010001001010</span><br><span class="line">l|m,long: -5769306098607591717.binary:</span><br><span class="line"> 1010111111101111010011101010101110011111111111111110111011011011</span><br><span class="line">l^m,long: -5841372497356010863.binary:</span><br><span class="line"> 1010111011101111010001101010100110011110010110111100101010010001</span><br><span class="line">l&lt;&lt;5,long: -179768631971968704.binary:</span><br><span class="line"> 1111110110000001010101010110000110110101100011011000100101000000</span><br><span class="line">l&gt;&gt;5,long: -270391532946889886.binary:</span><br><span class="line"> 1111110000111111011000000101010101011000011011010110001101100010</span><br><span class="line">(~l)&gt;&gt;5,long: 270391532946889885.binary:</span><br><span class="line"> 1111000000100111111010101010100111100100101001110010011101</span><br><span class="line">l&gt;&gt;&gt;5,long: 306069219356533602.binary:</span><br><span class="line"> 10000111111011000000101010101011000011011010110001101100010</span><br><span class="line">(~l)&gt;&gt;&gt;5,long: 270391532946889885.binary:</span><br><span class="line"> 1111000000100111111010101010100111100100101001110010011101</span><br></pre></td></tr></table></figure><p><strong>注意高位表示符号：0为正，1为负。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 移位操作符 </tag>
            
            <tag> 二进制 </tag>
            
            <tag> 按位操作符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制转十进制快速方法</title>
      <link href="/2019/08/05/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B6%E5%BF%AB%E9%80%9F%E6%96%B9%E6%B3%95/"/>
      <url>/2019/08/05/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B6%E5%BF%AB%E9%80%9F%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>转自 <a href="https://blog.csdn.net/xy2204/article/details/50522075" target="_blank" rel="noopener">https://blog.csdn.net/xy2204/article/details/50522075</a></p><p>如果你是搞网络的，我觉得你一定要记住以下几种二进制数的转换值。你是一个网络工程 师，当看到一串二进制数时，你不要告诉我你会拿出笔纸或掰手指算半天才知道它转化成十进制的数值。要想快，那就记下下面几种常见的二进制–十进制转换：</p><a id="more"></a> <p>以8位 来演示:</p><p>1.第一种:</p><p>   00000001      1</p><p>   00000010      2</p><p>   00000100      4</p><p>   00001000      8</p><p>   00010000      16</p><p>   00100000      32</p><p>   01000000      64</p><p>   10000000      128</p><p>2.第二种：</p><p>  00000001      1</p><p>  00000011      3</p><p>  00000111      7</p><p>  00001111      15</p><p>  00011111      31</p><p>  00111111      63</p><p>  01111111      127</p><p>3.第三种：</p><p>  10000000     128</p><p>  11000000     192</p><p>  11100000     224</p><p>  11110000     240</p><p>  11111000     248</p><p>  11111100     252</p><p>  11111110     254</p><p>举个例子：  11101011     </p><pre><code>可分为：11100000（上面第三种类型）   22400001000（上面第一种类型）   800000011（上面第二种类型）   3</code></pre><p>我们通过记住上面三种类型的转换，再用加 法（加法口算你会吧）立即得到结果：235</p><p>==================================================================================</p><p>方法二：</p><p>熟记以下排列，其实很Easy了，从右往 左，依次是前一个数的2倍：</p><p>256      128      64       32      16      8        4         2         1</p><p>随便写个数字比如48</p><p>48 = 32 + 16,所以在32 和 16所在的位置为1，其余为0，</p><p>转为2进制就是</p><p>256  128  64  32  16  8   4   2   1</p><p>0      0       0    1    1   0   0   0   0</p><p>二进制转十进制就更简单了，</p><p>比如随便写的一串 01111101</p><p>先写上 ：  0         1           1         1         1         1          0          1</p><p>然后填充 128      64        32       16        8          4          2          1</p><p>十进制为 64+32+16+8+4+1=125</p><p>转载地址：<a href="http://blog.163.com/kongdelu2009@yeah/blog/static/111995207201037105051259/" target="_blank" rel="noopener">http://blog.163.com/kongdelu2009@yeah/blog/static/111995207201037105051259/</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 二进制 </tag>
            
            <tag> 十进制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java移位操作符</title>
      <link href="/2019/08/04/Java%E7%A7%BB%E4%BD%8D%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
      <url>/2019/08/04/Java%E7%A7%BB%E4%BD%8D%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<p>Java移位操作符</p><a id="more"></a><h3 id="移位运算符和按位运算符一样，同属于位运算符，因此移位运算符的位指的也是二进制位。它包括以下几种："><a href="#移位运算符和按位运算符一样，同属于位运算符，因此移位运算符的位指的也是二进制位。它包括以下几种：" class="headerlink" title="移位运算符和按位运算符一样，同属于位运算符，因此移位运算符的位指的也是二进制位。它包括以下几种："></a>移位运算符和按位运算符一样，同属于位运算符，因此移位运算符的位指的也是二进制位。它包括以下几种：</h3><p>1.左移位（&lt;&lt;）：将操作符左侧的操作数向左移动操作符右侧指定的位数。移动的规则是在二进制的低位补0。</p><p>2.有符号右移位（&gt;&gt;）：将操作符左侧的操作数向右移动操作符右侧指定的位数。移动的规则是，如果被操作数的符号为正，则在二进制的高位补0；如果被操作数的符号为负，则在二进制的高位补1。</p><p>3.无符号右移位（&gt;&gt;&gt;）：将操作符左侧的操作数向右移动操作符右侧指定的位数。移动的规则是，无论被操作数的符号是正是负，都在二进制位的高位补0。</p><h3 id="再来考虑一种情况，当要移位的位数大于被操作数对应数据类型所能表示的最大位数时，结果会是怎样呢？"><a href="#再来考虑一种情况，当要移位的位数大于被操作数对应数据类型所能表示的最大位数时，结果会是怎样呢？" class="headerlink" title="再来考虑一种情况，当要移位的位数大于被操作数对应数据类型所能表示的最大位数时，结果会是怎样呢？"></a>再来考虑一种情况，当要移位的位数大于被操作数对应数据类型所能表示的最大位数时，结果会是怎样呢？</h3><p>1、byte、short、char在做移位运算之前，会被自动转换为int类型，然后再进行运算。</p><p>2、byte、short、int、char类型的数据经过移位运算后结果都为int型。</p><p>3、long经过移位运算后结果为long型。</p><p>4、在左移位（&lt;&lt;）运算时，如果要移位的位数大于被操作数对应数据类型所能表示的最大位数，那么先将要求移位数对该类型所能表示的最大位数求余后，再将被操作数移位所得余数对应的数值，效果不变。比如1&lt;&lt;35=1&lt;&lt;(35%32)=1&lt;&lt;3=8。</p><p>5、对于有符号右移位（&gt;&gt;）运算和无符号右移位（&gt;&gt;&gt;）运算，当要移位的位数大于被操作数对应数据类型所能表示的最大位数时，那么先将要求移位数对该类型所能表示的最大位数求余后，再将被操作数移位所得余数对应的数值，效果不变。。比如100&gt;&gt;35=100&gt;&gt;(35%32)=100&gt;&gt;3=12。</p><h3 id="在编程思想中有这么一句话：”移位“可与”等号“（-lt-lt-或-gt-gt-或-gt-gt-gt-）组合使用"><a href="#在编程思想中有这么一句话：”移位“可与”等号“（-lt-lt-或-gt-gt-或-gt-gt-gt-）组合使用" class="headerlink" title="在编程思想中有这么一句话：”移位“可与”等号“（&lt;&lt;=或&gt;&gt;=或&gt;&gt;&gt;=）组合使用"></a>在编程思想中有这么一句话：”移位“可与”等号“（&lt;&lt;=或&gt;&gt;=或&gt;&gt;&gt;=）组合使用</h3><p>但是在进行这样的移位赋值操作时，可能会遇到一个问题：如果byte或short值进行这样的移位运算，得到的可能不是正确的结果。</p><p>它们会先被转换成int类型，再进行右移操作，然后被截断，赋值给原来的类型，在这种情况下可能得到-1的结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int i = -1;</span><br><span class="line">System.out.println(Integer.toBinaryString(i));</span><br><span class="line">i &gt;&gt;&gt;=10;</span><br><span class="line">System.out.println(Integer.toBinaryString(i));</span><br><span class="line">long l = -1;</span><br><span class="line">System.out.println(Long.toBinaryString(l));</span><br><span class="line">l &gt;&gt;&gt;= 10;</span><br><span class="line">System.out.println(Long.toBinaryString(l));</span><br><span class="line">short s = -1;</span><br><span class="line">System.out.println(Integer.toBinaryString(s));</span><br><span class="line">s &gt;&gt;&gt;= 10;</span><br><span class="line">System.out.println(Integer.toBinaryString(s));</span><br><span class="line">byte b = -1;</span><br><span class="line">System.out.println(Integer.toBinaryString(b));</span><br><span class="line">b &gt;&gt;&gt;= 10;</span><br><span class="line">System.out.println(Integer.toBinaryString(b));</span><br><span class="line">b = -1;</span><br><span class="line">System.out.println(Integer.toBinaryString(b));</span><br><span class="line">System.out.println(Integer.toBinaryString(b&gt;&gt;&gt;10));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行及结果：<br>11111111111111111111111111111111<br>1111111111111111111111<br>1111111111111111111111111111111111111111111111111111111111111111<br>111111111111111111111111111111111111111111111111111111<br>11111111111111111111111111111111<br>11111111111111111111111111111111<br>11111111111111111111111111111111<br>11111111111111111111111111111111<br>11111111111111111111111111111111<br>1111111111111111111111</p></blockquote><p>运行会发现s&gt;&gt;&gt;=10和b&gt;&gt;&gt;=10的输出结果是错误的。<br>而没有赋值的b&gt;&gt;&gt;=10的输出正确。</p><h3 id="内容转载于-http-blog-sina-com-cn-s-blog-6ca0f5eb0102vlha-html"><a href="#内容转载于-http-blog-sina-com-cn-s-blog-6ca0f5eb0102vlha-html" class="headerlink" title="内容转载于 http://blog.sina.com.cn/s/blog_6ca0f5eb0102vlha.html"></a>内容转载于 <a href="http://blog.sina.com.cn/s/blog_6ca0f5eb0102vlha.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_6ca0f5eb0102vlha.html</a></h3><p>晚上纠结了很久这个问题，不懂为什么低5位才有用，怎么就2^5等于32位，跟int的32位挂上钩了，思考了很久终于明白了。</p><p>这段话有两个出处，一个是Java编程思想3.11移位操作符中出现，原话是“只有数值右端的低5位才有用”。一个是Java解惑中谜题27：变幻莫测的i值，原话是“移位操作符只使用其右操作数的低5位作为移位长度”。</p><p>弄清这句话首先需要弄清楚移位操作符，移位操作符是一个二元操作符，两个操作数分别位于移位操作两边形如：左操作数 移位操作符 右操作数 这样的结构，其含义是，将左操作数按照移位操作符指定的移位方向，进行右操作数指定的次数的移位。然后对照出处二，Java解惑中所描述的，就豁然开朗了。</p><p>首先，移位操作符能操作的数只有int类型和long类型，这个是指左操作数的类型。对于int类型而言，int在Java中占4字节，一共32位，也就是说，对于一个在Java中的int数据，做32次移位，那么这个int数据就完全变了，以左移为例，左移是补0，那么对于任意一个int类型数据，做32次移位，那么int数据变成32位全0的数据，Java不允许一次性移位左操作数的所有位，也就是右操作数不能大于32。于是回到上述的句子，其指的是右操作数的低5位，5位二进制所代表的最大值为2^5-1，为31，所以取右操作数的低5位，就是只看右操作数的二进制的低5位，其数值不会超过2^5次方，也就是int的32位。因此，移位操作符进行移位的实际次数，其实是右操作数2的次数。</p><p>对于Java编程思想中的翻译，“只有数值右端的低5位才有用”，真是莫名其妙了。其英语原文为：Only the five low-order bits of the right-hand side will be used.看到英文原文，可就明白了这句话的意思，鉴于现在的英译中的书籍参差不齐，建议阅读的时候配一本英文版的电子书在手边以备不时之需。</p><p>简而言之，移位操作符执行的次数，只取右操作数的低5位（其数值不会大于2^5=32，也就是移位次数不会超过32位，因为32位是int型的位数）作为移位的次数。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Thinking in Java </tag>
            
            <tag> 移位操作符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Integer和int的区别</title>
      <link href="/2019/08/04/Integer%E5%92%8Cint%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/08/04/Integer%E5%92%8Cint%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>Integer和int的区别</p><a id="more"></a><p>内容转载于 <a href="https://www.cnblogs.com/guodongdidi/p/6953217.html" target="_blank" rel="noopener">https://www.cnblogs.com/guodongdidi/p/6953217.html</a></p><ol><li>Integer是int的包装类，int则是java的一种基本数据类型</li><li>Integer变量必需实例化后才能使用，而int变量不需要</li><li>Integer实际是对象的引用，当new一个integer时，实际上是生成一个指针指向对象；而int则是直接存储数据值</li><li>Integer的默认值是null，int的默认值是0</li></ol><p>延伸：<br>关于Integer和int的比较<br>1.由于Integer变量实际上是对一个Integer对象的引用，所以两个通过new生成的Integer变量永远是不相等的（因为new生成的是两个对象，其内存地址不同）。</p><blockquote><p>Integer i = new Integer(100);<br>Integer j = new Integer(100);<br>System.out.print(i == j); //false</p></blockquote><p>2.Integer变量和int变量比较时，只要两个变量的值是向等的，则结果为true（因为包装类Integer和基本数据类型int比较时，java会自动拆包装为int，然后进行比较，实际上就变为两个int变量的比较）</p><blockquote><p>Integer i = new Integer(100);<br>int j = 100;<br>System.out.print(i == j); //true</p></blockquote><p>3.非new生成的Integer变量和new Integer()生成的变量比较时，结果为false。（因为非new生成的Integer变量指向的是java常量池中的对象，而new Integer()生成的变量指向堆中新建的对象，两者在内存中的地址不同）</p><blockquote><p>Integer i = new Integer(100);<br>Integer j = 100;<br>System.out.print(i == j); //false</p></blockquote><p>4.对于两个非new生成的Integer对象，进行比较时，如果两个变量的值在区间-128到127之间，则比较结果为true，如果两个变量的值不在此区间，则比较结果为false</p><blockquote><p>Integer i = 100;<br>Integer j = 100;<br>System.out.print(i == j); //true</p></blockquote><blockquote><p>Integer i = 128;<br>Integer j = 128;<br>System.out.print(i == j); //false</p></blockquote><p>对于第4条的原因：<br>java在编译Integer i = 100 ;时，会翻译成为Integer i = Integer.valueOf(100)；，而java API中对Integer类型的valueOf的<br>定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static Integer valueOf(int i)&#123;</span><br><span class="line">    assert IntegerCache.high &gt;= 127;</span><br><span class="line">    if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= &gt;IntegerCache.high)&#123;</span><br><span class="line">        return IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    &#125;</span><br><span class="line">    return new Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java对于-128到127之间的数，会进行缓存，Integer i = 127时，会将127进行缓存，下次再写Integer j = 127时，就会直接从缓存中取，就不会new了</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Integer </tag>
            
            <tag> int </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>负数的二进制表示</title>
      <link href="/2019/08/04/%E8%B4%9F%E6%95%B0%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA/"/>
      <url>/2019/08/04/%E8%B4%9F%E6%95%B0%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<p>了解负数的二进制表示</p><a id="more"></a><p>计算机中，负数以其正值的补码形式表示</p><p>比如2的二进制为10，但int类型的数占用4字节（32位），就写为00000000 00000000 00000000 00000010</p><p>求-2的二进制就要求出原码、补码、反码</p><p>原码：将整数的绝对值大小转换为二进制，称为原码。</p><blockquote><p>00000000 00000000 00000000 00000010</p></blockquote><p>反码：将原码按位取反，所得为反码。（1变0，0变1）。</p><blockquote><p>11111111 11111111 11111111 11111101</p></blockquote><p>补码：反码加1为补码。</p><blockquote><p>11111111 11111111 11111111 11111110</p></blockquote><p>-2的二进制为11111111 11111111 11111111 11111110</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 二进制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java短路与</title>
      <link href="/2019/08/04/Java%E7%9F%AD%E8%B7%AF%E4%B8%8E/"/>
      <url>/2019/08/04/Java%E7%9F%AD%E8%B7%AF%E4%B8%8E/</url>
      
        <content type="html"><![CDATA[<p>Java短路与</p><a id="more"></a><h2 id="Java中使用逻辑操作符时遇到的短路现象"><a href="#Java中使用逻辑操作符时遇到的短路现象" class="headerlink" title="Java中使用逻辑操作符时遇到的短路现象"></a>Java中使用逻辑操作符时遇到的短路现象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// &amp;&amp;短路与</span><br><span class="line"></span><br><span class="line">public class ShortCircuit&#123;</span><br><span class="line">static boolean test1(int val) &#123;</span><br><span class="line">System.out.println(&quot;test(&quot;+val+&quot;)&quot;);</span><br><span class="line">System.out.println(&quot;result: &quot;+(val&lt;1));</span><br><span class="line">return val&lt;1;</span><br><span class="line">&#125;</span><br><span class="line">static boolean test2(int val) &#123;</span><br><span class="line">System.out.println(&quot;test(&quot;+val+&quot;)&quot;);</span><br><span class="line">System.out.println(&quot;result: &quot;+(val&lt;2));</span><br><span class="line">return val&lt;2;</span><br><span class="line">&#125;</span><br><span class="line">static boolean test3(int val) &#123;</span><br><span class="line">System.out.println(&quot;test(&quot;+val+&quot;)&quot;);</span><br><span class="line">System.out.println(&quot;result: &quot;+(val&lt;3));</span><br><span class="line">return val&lt;3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">boolean b=test1(0)&amp;&amp;test2(2)&amp;&amp;test3(2);</span><br><span class="line">System.out.println(&quot;expression is &quot;+b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行及结果：<br>test(0)<br>result: true<br>test(2)<br>result: false<br>expression is false</p></blockquote><p>可以发现test1与test2比较后直接输出，不会对test3进行比较，这就是&amp;和&amp;&amp;的不同之处。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java编程思想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程思想第三章练习</title>
      <link href="/2019/08/04/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E7%AC%AC%E4%B8%89%E7%AB%A0%E7%BB%83%E4%B9%A0/"/>
      <url>/2019/08/04/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E7%AC%AC%E4%B8%89%E7%AB%A0%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>Java编程思想第三章练习</p><a id="more"></a><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><h3 id="练习5："><a href="#练习5：" class="headerlink" title="练习5："></a>练习5：</h3><p>创建一个名为Dogde类，它包含两个String域：name和scruffy（它的叫声为“Ruff!”）,另一个名为scruffy（它的叫声为“Wurf！”）。然后显示它们的名字和叫声。<br>练习6：<br>创建一个新的Dog索引，并对其赋值为spot对象。测试用==和equals()方法比较所有引用的结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Dog&#123;</span><br><span class="line">String name;</span><br><span class="line">String says;</span><br><span class="line"></span><br><span class="line">void shows() &#123;</span><br><span class="line">System.out.println(&quot;name: &quot;+name+&quot; Says: &quot;+says);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Test&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Dog spot = new Dog();</span><br><span class="line">spot.name=&quot;Spot&quot;;</span><br><span class="line">spot.says=&quot;Ruff!&quot;;</span><br><span class="line">Dog scruffy = new Dog();</span><br><span class="line">scruffy.name=&quot;Sruffy&quot;;</span><br><span class="line">scruffy.says=&quot;Wufrf!&quot;;</span><br><span class="line"></span><br><span class="line">spot.shows();</span><br><span class="line">scruffy.shows();</span><br><span class="line"></span><br><span class="line">Dog newDog = new Dog();</span><br><span class="line">newDog = spot;</span><br><span class="line">System.out.println(newDog==spot);</span><br><span class="line">System.out.println(newDog.equals(spot));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行及结果：<br>name: Spot Says: Ruff!<br>name: Sruffy Says: Wufrf!<br>true<br>true</p></blockquote><h3 id="练习7："><a href="#练习7：" class="headerlink" title="练习7："></a>练习7：</h3><p>编写一个程序，模拟扔硬币的结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Random;</span><br><span class="line"></span><br><span class="line">class Coin&#123;</span><br><span class="line">static void test() &#123;</span><br><span class="line">Random r = new Random();</span><br><span class="line">System.out.println(r.nextInt(2) == 1?&quot;正面&quot;:&quot;反面&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Test&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Coin.test();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习8："><a href="#练习8：" class="headerlink" title="练习8："></a>练习8：</h3><p>展示用16进制和8进制记数法（字面值）来操作long值（赋值），用Long.toBinaryString()来显示其结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">long l1=0xC2B;</span><br><span class="line">long l2=0777;</span><br><span class="line">System.out.println(Long.toBinaryString(l1));</span><br><span class="line">System.out.println(Long.toBinaryString(l2));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习9："><a href="#练习9：" class="headerlink" title="练习9："></a>练习9：</h3><p>分别显示用float和double指数计数法所能表示的最大和最小的数字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">float floatmax = Float.MAX_VALUE;</span><br><span class="line">float floatmin = Float.MIN_VALUE;</span><br><span class="line">double doublemax = Double.MAX_VALUE;</span><br><span class="line">double doublemin = Double.MIN_VALUE;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;floatmax = &quot; + floatmax);</span><br><span class="line">System.out.println(&quot;floatmin = &quot; + floatmin);</span><br><span class="line">System.out.println(&quot;doublemax = &quot; + doublemax);</span><br><span class="line">System.out.println(&quot;doublemin = &quot; + doublemin);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行及结果：<br>floatmax = 3.4028235E38<br>floatmin = 1.4E-45<br>doublemax = 1.7976931348623157E308<br>doublemin = 4.9E-324</p></blockquote><h3 id="练习10："><a href="#练习10：" class="headerlink" title="练习10："></a>练习10：</h3><p>编写一个具有两个常量值的程序,一个具有交替的二进制位1和0,其中最低有效位为0,另一个也具有交替的二进制位1和0,其中最低有效位为1.取这两个值,用按位操作符以所有可能的方式结合运算它们,然后用Integer.toBinaryString()显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int a = 0xaaaaaaaa;</span><br><span class="line">int b = 0x55555555;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;  a: &quot;+Integer.toBinaryString(a));</span><br><span class="line">System.out.println(&quot;  b: &quot;+Integer.toBinaryString(b));</span><br><span class="line">System.out.println(&quot; ~a: &quot;+Integer.toBinaryString(~a));</span><br><span class="line">System.out.println(&quot; ~b: &quot;+Integer.toBinaryString(~b));</span><br><span class="line">System.out.println(&quot;a&amp;a: &quot;+Integer.toBinaryString(a&amp;a));</span><br><span class="line">System.out.println(&quot;a|a: &quot;+Integer.toBinaryString(a|a));</span><br><span class="line">System.out.println(&quot;a^a: &quot;+Integer.toBinaryString(a^a));</span><br><span class="line">System.out.println(&quot;a&amp;b: &quot;+Integer.toBinaryString(a&amp;b));</span><br><span class="line">System.out.println(&quot;a|b: &quot;+Integer.toBinaryString(a|b));</span><br><span class="line">System.out.println(&quot;a^b: &quot;+Integer.toBinaryString(a^b));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行及结果：<br> a: 10101010101010101010101010101010<br> b: 1010101010101010101010101010101<br>~a: 1010101010101010101010101010101<br>~b: 10101010101010101010101010101010<br>a&amp;a: 10101010101010101010101010101010<br>a|a: 10101010101010101010101010101010<br>a^a: 0<br>a&amp;b: 0<br>a|b: 11111111111111111111111111111111<br>a^b: 11111111111111111111111111111111</p></blockquote><h3 id="练习11："><a href="#练习11：" class="headerlink" title="练习11："></a>练习11：</h3><p>以一个最高有效位为1的二进制数开始,用有符号右移操作符对其进行右移,直至所有的二进制位都被移出为止,每移一位都显示二进制字符串效果.<br>练习12：<br>以一个所有位都为1的二进制数字开始,先左移它,然后用无符号右移操作符对其进行右移,直至所有二进制位都移出为止,每移一位都要显示二进制字符串效果.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int number = 0xaaaaa;</span><br><span class="line">while(number != 0) &#123;</span><br><span class="line">number &gt;&gt;= 1;</span><br><span class="line">System.out.println(Integer.toBinaryString(number));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;====================&quot;);</span><br><span class="line"></span><br><span class="line">int number2 = 0xff;</span><br><span class="line">number2 &lt;&lt;= 1;</span><br><span class="line"></span><br><span class="line">while(number2 != 0) &#123;</span><br><span class="line">number2 &gt;&gt;&gt;= 1;</span><br><span class="line">System.out.println(Integer.toBinaryString(number2));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">运行及结果：</span><br><span class="line">1010101010101010101</span><br><span class="line">101010101010101010</span><br><span class="line">10101010101010101</span><br><span class="line">1010101010101010</span><br><span class="line">101010101010101</span><br><span class="line">10101010101010</span><br><span class="line">1010101010101</span><br><span class="line">101010101010</span><br><span class="line">10101010101</span><br><span class="line">1010101010</span><br><span class="line">101010101</span><br><span class="line">10101010</span><br><span class="line">1010101</span><br><span class="line">101010</span><br><span class="line">10101</span><br><span class="line">1010</span><br><span class="line">101</span><br><span class="line">10</span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line">====================</span><br><span class="line">11111111</span><br><span class="line">1111111</span><br><span class="line">111111</span><br><span class="line">11111</span><br><span class="line">1111</span><br><span class="line">111</span><br><span class="line">11</span><br><span class="line">1</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h3 id="练习13："><a href="#练习13：" class="headerlink" title="练习13："></a>练习13：</h3><p>编写一个方法,它以二进制形式显示char类型的值.使用多个不同的字符来展示它.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class TestChar&#123;</span><br><span class="line">static void Conversion(char c) &#123;</span><br><span class="line">System.out.println(Integer.toBinaryString((int)c));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Test &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">TestChar.Conversion(&apos;a&apos;);</span><br><span class="line">TestChar.Conversion(&apos;b&apos;);</span><br><span class="line">TestChar.Conversion(&apos;c&apos;);</span><br><span class="line">TestChar.Conversion(&apos;$&apos;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行及结果：<br>1100001<br>1100010<br>1100011<br>100100</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Thinking in Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中对象的赋值</title>
      <link href="/2019/08/03/Java%E4%B8%AD%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%B5%8B%E5%80%BC/"/>
      <url>/2019/08/03/Java%E4%B8%AD%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%B5%8B%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>记录以下学习Java对象赋值中出现的问题</p><a id="more"></a><p>在java中赋值使用操作符“=”。意思是“取右边的值，把它赋值给左边”。右值可以是任何常数、变量或者表达式（只要能生成一个值）。但左边必须是一个明确的、已命名的变量。<br>但是不能把任何东西赋值给一个常数，常数不能作为左值（比如不能4=a;）。<br>基本数据类型的赋值是直接将一个地方的内容复制到了另一个地方。例如，a=b,b的内容复制给a。接着又修改了a，而b并不会受a修改的影响。</p><p>但在为对象赋值的时候，情况却不一样。<br>对一个对象进行操作时，我们真正操作的是对对象的引用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Tank&#123;</span><br><span class="line">int level;</span><br><span class="line">&#125;</span><br><span class="line">public class Test&#123;</span><br><span class="line">public static void main(String[] arg) &#123;</span><br><span class="line">Tank t1 = new Tank();</span><br><span class="line">Tank t2 = new Tank();</span><br><span class="line">t1.level = 9;</span><br><span class="line">t2.level = 47;</span><br><span class="line">System.out.println(&quot;1: t1.level: &quot; + t1.level + &quot;,t2.level: &quot; + t2.level);</span><br><span class="line">t1 = t2;</span><br><span class="line">System.out.println(&quot;2: t1.level: &quot; + t1.level + &quot;,t2.level: &quot; + t2.level);</span><br><span class="line">t1.level = 27;</span><br><span class="line">System.out.println(&quot;3: t1.level: &quot; + t1.level + &quot;,t2.level: &quot; + t2.level);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;/*Output:</span><br><span class="line">1: t1.level: 9,t2.level: 47</span><br><span class="line">2: t1.level: 47,t2.level: 47</span><br><span class="line">3: t1.level: 27,t2.level: 27</span><br><span class="line">*///:~</span><br></pre></td></tr></table></figure><p>每个Tank类对象的level域都赋予了一个不同的值，然后，将t2赋给t1。<br>我们可能会期望t1和t2总是相互独立的。<br>但由于赋值操作的是一个对象的引用，t1和t2包含的引用相同,所以修改t1的同时也改变了t2。<br>这种特殊现象称为”别名现象“。</p><blockquote><p>避免方式：<br>t1.level = t2.level;</p></blockquote><hr><h2 id="方法调用中的别名问题"><a href="#方法调用中的别名问题" class="headerlink" title="方法调用中的别名问题"></a>方法调用中的别名问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Tank&#123;</span><br><span class="line">char c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">static void f(Tank y) &#123;</span><br><span class="line">y.c = &apos;z&apos;;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] arg) &#123;</span><br><span class="line">Tank t = new Tank();</span><br><span class="line">t.c = &apos;a&apos;;</span><br><span class="line">System.out.println(&quot;1: t.c: &quot; + t.c);</span><br><span class="line">f(t);</span><br><span class="line">System.out.println(&quot;2: t.c: &quot; + t.c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行及结果：<br>1: t.c: a<br>2: t.c: z</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 赋值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java中局部变量的初始化问题</title>
      <link href="/2019/08/02/java%E4%B8%AD%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E9%97%AE%E9%A2%98/"/>
      <url>/2019/08/02/java%E4%B8%AD%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>java中局部变量的初始化问题</p><a id="more"></a> <h2 id="Java中局部变量必须初始化但成员变量不必须初始化"><a href="#Java中局部变量必须初始化但成员变量不必须初始化" class="headerlink" title="Java中局部变量必须初始化但成员变量不必须初始化"></a>Java中局部变量必须初始化但成员变量不必须初始化</h2><p>其实无论成员变量还是局部变量都要初始化，只是JVM帮我们初始化了成员变量。</p><p>JVM在初始化对象时就可以初始化成员变量。</p><p>在类的加载中，我们定义的成员变量进行了两次初始化，一次赋默认初值（0值，boolean赋为false），一次赋自定义的初值。<br>而对于方法中的局部变量，需要进栈执行，这个过程是没有赋初值过程的。</p><p>还有种情况为：定义的局部变量没有赋值，也没有报错，是因为局部变量没有被调用</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 局部变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql数据备份与还原</title>
      <link href="/2019/07/21/Mysql%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E4%B8%8E%E8%BF%98%E5%8E%9F/"/>
      <url>/2019/07/21/Mysql%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E4%B8%8E%E8%BF%98%E5%8E%9F/</url>
      
        <content type="html"><![CDATA[<p>Mysql数据备份与还原</p><a id="more"></a><ul><li><h2 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h2></li></ul><p>1.整库备份<br>    利用mysqldump进行sql备份<br>    语法：mysqldump.exe -hPup 数据库名字 &gt; 备份路径</p><pre><code>mysqldump.exe -hlocalhost -P3306 -uroot -proot mydatabase C:/server/mydatabase.sql</code></pre><p>2.单表备份<br>    语法：mysqldump.exe -hPup 数据库名字 表名 &gt; 备份路径</p><pre><code>mysqldump -uroot -proot mydatabase my_int &gt; c:/server/int.sql</code></pre><p>3.多表备份<br>    语法：mysqldump.exe -hPup 数据库名字 表名 表名 .. &gt; 备份路径</p><pre><code>mysqldump -uroot -proot mydatabase my_student my_int &gt; c:/server/student_int.sq</code></pre><ul><li><h2 id="数据还原"><a href="#数据还原" class="headerlink" title="数据还原"></a>数据还原</h2></li></ul><p>1.利用mysql.exe客户端<br>     在cmd中直接对数据还原<br>     语法：mysql -hPup 数据库 &lt; 文件路径</p><pre><code>mysql -uroot -proot mydatabse &lt; c:/server/mydatabase.sql</code></pre><p>2.利用sql指令<br>     登录mysql客户端并进入对应数据库<br>    语法：source 文件路径（注意后面会有； 因为这里是在mysql中输入的sql指令）</p><pre><code>source c:/server/int.sql;</code></pre><p>3.复制粘贴</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客文章添加图片、音乐、视频</title>
      <link href="/2019/07/19/%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87/"/>
      <url>/2019/07/19/%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p>博客文章添加图片、音乐、视频</p><a id="more"></a><h2 id="首先修改配置-config-yml"><a href="#首先修改配置-config-yml" class="headerlink" title="首先修改配置_config.yml"></a>首先修改配置_config.yml</h2><p> 将post_asset_folder: false改为post_asset_folder: true</p><h2 id="然后安装一个图片插件"><a href="#然后安装一个图片插件" class="headerlink" title="然后安装一个图片插件"></a>然后安装一个图片插件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image -- save</span><br></pre></td></tr></table></figure><p>新建一个博文后就会发现在/source/_posts目录下会生成同名文件夹<br>将图片扔里面</p><h2 id="添加本地图片"><a href="#添加本地图片" class="headerlink" title="添加本地图片"></a>添加本地图片</h2><p> 在博文中插入代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片描述](文件夹/h1.jpg)</span><br></pre></td></tr></table></figure><p>例:<br><img src="/2019/07/19/博客文章添加图片/s1.gif" alt="图片描述"></p><h2 id="添加外部连接"><a href="#添加外部连接" class="headerlink" title="添加外部连接"></a>添加外部连接</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片描述](图片地址)</span><br></pre></td></tr></table></figure><p>例:<br><img src="https://tse3-mm.cn.bing.net/th?id=OIP.-KRAMGIepQ5rXOFgZPCPggHaHa&w=141&h=150&c=7&o=5&dpr=1.1&pid=1.7" alt="图片描述"></p><h2 id="插入音乐"><a href="#插入音乐" class="headerlink" title="插入音乐"></a>插入音乐</h2><p>直接粘贴代码到博文：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 </span><br><span class="line">src=&quot;http://music.163.com/outchain/player?type=2&amp;id=5263408&amp;auto=0&amp;height=66&quot;&gt;</span><br><span class="line">&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><h2 id="插入视频"><a href="#插入视频" class="headerlink" title="插入视频"></a>插入视频</h2><p>直接粘贴代码到博文：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe </span><br><span class="line">height=300 width=510 </span><br><span class="line">src=&quot;视频链接&quot; </span><br><span class="line">frameborder=0 allowfullscreen&gt;</span><br><span class="line">&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2019/07/18/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/07/18/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>今天天气真好</p><a id="more"></a><p> 好就好在好个锤子</p><p> <img src="https://www.bing.com/th?id=OGC.56352ff9bbbcdc091caccbf25f224961&pid=1.7&rurl=http%3a%2f%2fwx4.sinaimg.cn%2fmw690%2f006HJgYYgy1fo3p3supnng308r08rnnc.gif&ehk=owCBmHH4kjoZ6jGhvNLrzA" alt="图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
